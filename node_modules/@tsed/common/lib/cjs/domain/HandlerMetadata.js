"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandlerMetadata = void 0;
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const platform_params_1 = require("@tsed/platform-params");
const schema_1 = require("@tsed/schema");
const HandlerType_1 = require("../interfaces/HandlerType");
class HandlerMetadata {
    constructor(options) {
        this.injectable = false;
        this.type = HandlerType_1.HandlerType.RAW_FN;
        this.hasNextFunction = false;
        const { target, token, propertyKey, type, scope, routeOptions } = options;
        this.type = type || target.type || HandlerType_1.HandlerType.RAW_FN;
        this.scope = scope || di_1.ProviderScope.SINGLETON;
        this.routeOptions = routeOptions || {};
        const handler = propertyKey ? target.prototype[propertyKey] : target;
        if (propertyKey) {
            this.target = target;
            this.token = token;
            this.propertyKey = propertyKey;
            this.hasNextFunction = this.hasParamType(platform_params_1.ParamTypes.NEXT_FN);
            if (this.hasParamType(platform_params_1.ParamTypes.ERR)) {
                this.type = HandlerType_1.HandlerType.ERR_MIDDLEWARE;
            }
            this.injectable = schema_1.JsonParameterStore.getParams(target, propertyKey).length > 0;
        }
        else {
            this.handler = handler;
        }
        if (!this.injectable) {
            if (handler.length === 4) {
                this.type = HandlerType_1.HandlerType.RAW_ERR_FN;
            }
            this.hasNextFunction = handler.length >= 3;
        }
    }
    get hasErrorParam() {
        return this.type === HandlerType_1.HandlerType.ERR_MIDDLEWARE || this.type === HandlerType_1.HandlerType.RAW_ERR_FN;
    }
    getParams() {
        return schema_1.JsonParameterStore.getParams(this.target, this.propertyKey) || [];
    }
    hasParamType(paramType) {
        return this.getParams().findIndex((p) => p.paramType === paramType) > -1;
    }
    isFinal() {
        var _a;
        return ((_a = this.routeOptions) === null || _a === void 0 ? void 0 : _a.isFinal) || false;
    }
    toString() {
        return [this.target && (0, core_1.nameOf)(this.target), this.propertyKey].filter(Boolean).join(".");
    }
}
exports.HandlerMetadata = HandlerMetadata;
//# sourceMappingURL=HandlerMetadata.js.map