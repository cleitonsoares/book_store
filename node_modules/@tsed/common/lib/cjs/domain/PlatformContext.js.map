{"version":3,"file":"PlatformContext.js","sourceRoot":"","sources":["../../../src/domain/PlatformContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {ContextMethods, DIContext, DIContextOptions} from \"@tsed/di\";\nimport {IncomingMessage, ServerResponse} from \"http\";\nimport {EndpointMetadata} from \"@tsed/schema\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\ndeclare global {\n  namespace TsED {\n    export interface Context extends PlatformContext {}\n  }\n}\n\nexport interface PlatformContextOptions extends DIContextOptions {\n  event: {\n    response?: ServerResponse;\n    request?: IncomingMessage;\n  };\n  ignoreUrlPatterns?: any[];\n  endpoint?: EndpointMetadata;\n}\n\nexport class PlatformContext extends DIContext implements ContextMethods {\n  /**\n   * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.\n   */\n  public endpoint: EndpointMetadata;\n  /**\n   * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n   */\n  public data: any;\n  /**\n   * The current @@PlatformResponse@@.\n   */\n  public response: PlatformResponse;\n  /**\n   * The current @@PlatformRequest@@.\n   */\n  public request: PlatformRequest;\n\n  private ignoreUrlPatterns: RegExp[] = [];\n\n  constructor({\n    event,\n    endpoint,\n    ignoreUrlPatterns = [],\n    ResponseKlass = PlatformResponse,\n    RequestKlass = PlatformRequest,\n    ...options\n  }: PlatformContextOptions) {\n    super({\n      ...options,\n      ignoreLog: () => {\n        return this.ignoreUrlPatterns.find((reg) => !!this.url.match(reg));\n      }\n    });\n\n    endpoint && (this.endpoint = endpoint);\n\n    this.ignoreUrlPatterns = ignoreUrlPatterns.map((pattern: string | RegExp) =>\n      typeof pattern === \"string\" ? new RegExp(pattern, \"gi\") : pattern\n    );\n\n    this.response = new ResponseKlass(event, this);\n    this.request = new RequestKlass(event, this);\n\n    this.response.request = this.request;\n    this.request.response = this.response;\n\n    this.request.request.$ctx = this;\n    this.request.request.id = this.id;\n    this.logger.url = this.url;\n\n    this.container.set(PlatformResponse, this.response);\n    this.container.set(PlatformRequest, this.request);\n    this.container.set(PlatformContext, this);\n\n    this.response.setHeader(\"x-request-id\", this.id);\n  }\n\n  get url() {\n    return this.request.url;\n  }\n\n  get app() {\n    return this.injector.get<PlatformApplication>(PlatformApplication)!;\n  }\n\n  async destroy() {\n    await super.destroy();\n\n    delete this.request?.request?.$ctx;\n\n    this.response.destroy();\n    this.request.destroy();\n\n    // @ts-ignore\n    delete this.endpoint;\n    // @ts-ignore\n    delete this.response;\n    // @ts-ignore\n    delete this.request;\n  }\n\n  isDone() {\n    if (!this.request || !this.response) {\n      return true;\n    }\n\n    if (this.request?.isAborted()) {\n      return true;\n    }\n\n    return this.response?.isDone();\n  }\n\n  /**\n   * Return the framework request instance (Express, Koa, etc...)\n   */\n  getRequest<Req = any>(): Req {\n    return this.request.getRequest<Req>();\n  }\n\n  /**\n   * Return the framework response instance (Express, Koa, etc...)\n   */\n  getResponse<Res = any>(): Res {\n    return this.response.getResponse<Res>();\n  }\n\n  /**\n   * Get Node.js request\n   */\n  getReq(): IncomingMessage {\n    return this.request.getReq();\n  }\n\n  /**\n   * Get Node.js response\n   */\n  getRes(): ServerResponse {\n    return this.response.getRes();\n  }\n\n  /**\n   * Return the original application instance.\n   */\n  getApp<T = any>(): T {\n    return this.app.getApp() as any;\n  }\n}\n"]}