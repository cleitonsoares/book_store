"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const schema_1 = require("@tsed/schema");
const PlatformControllerBuilder_1 = require("../builder/PlatformControllerBuilder");
const PlatformRouteDetails_1 = require("../domain/PlatformRouteDetails");
const PlatformApplication_1 = require("./PlatformApplication");
const PlatformMiddlewaresChain_1 = require("./PlatformMiddlewaresChain");
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let Platform = class Platform {
    constructor(injector, platformApplication) {
        this.injector = injector;
        this.platformApplication = platformApplication;
        this._routes = [];
        this._controllers = [];
        this.createRouters();
    }
    get app() {
        return this.platformApplication;
    }
    get routes() {
        return this._routes;
    }
    addRoutes(routes) {
        routes.forEach((routeSettings) => {
            this.addRoute(routeSettings.route, routeSettings.token);
        });
    }
    addRoute(basePath, token) {
        const { injector } = this;
        const provider = injector.getProvider(token);
        if (!provider || provider.hasParent()) {
            return;
        }
        this._controllers.push(...this.getAllControllers(basePath, token));
        const ctrlPath = (0, schema_1.concatPath)(basePath, schema_1.JsonEntityStore.from(provider.token).path);
        this.app.use(ctrlPath, ...[].concat((0, PlatformControllerBuilder_1.getRouter)(injector, provider).callback()));
        this._routes = (0, schema_1.getOperationsRoutes)(provider.token, {
            withChildren: true,
            basePath
        }).reduce((routes, operationRoute) => {
            if (injector.hasProvider(token)) {
                const provider = injector.getProvider(operationRoute.token);
                const route = new PlatformRouteDetails_1.PlatformRouteDetails({
                    ...operationRoute,
                    provider
                });
                routes = routes.concat(route);
            }
            return routes;
        }, this._routes);
        return this;
    }
    /**
     * Get all routes built by TsExpressDecorators and mounted on Express application.
     * @returns {PlatformRouteDetails[]}
     */
    getRoutes() {
        return this._routes;
    }
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers() {
        return this._controllers;
    }
    $onInit() {
        this.buildControllers();
    }
    /**
     * Create routers from the collected controllers.
     * @private
     */
    createRouters() {
        const { injector } = this;
        injector.getProviders(di_1.ProviderType.CONTROLLER).map((provider) => {
            (0, PlatformControllerBuilder_1.createRouter)(injector, provider);
        });
    }
    /**
     * Get all router controllers from the controller token.
     * @private
     */
    getAllControllers(basePath, token) {
        const store = token.isStore ? token : (0, schema_1.getJsonEntityStore)(token);
        const ctrlPath = (0, schema_1.concatPath)(basePath, schema_1.JsonEntityStore.from(token).path);
        const children = store.get("childrenControllers", []);
        return children
            .reduce((controllers, token) => {
            const childBasePath = (0, schema_1.concatPath)(basePath, store.path);
            return controllers.concat(this.getAllControllers(childBasePath, token));
        }, [])
            .concat([
            {
                route: ctrlPath,
                provider: this.injector.getProvider(token)
            }
        ]);
    }
    /**
     * Create controllers from DI
     * @private
     */
    buildControllers() {
        const { injector } = this;
        injector.getProviders(di_1.ProviderType.CONTROLLER).map((provider) => {
            if (!provider.hasParent()) {
                return (0, PlatformControllerBuilder_1.buildRouter)(injector, provider);
            }
        });
    }
};
Platform = tslib_1.__decorate([
    (0, di_1.Injectable)({
        scope: di_1.ProviderScope.SINGLETON,
        imports: [PlatformMiddlewaresChain_1.PlatformMiddlewaresChain]
    }),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService, PlatformApplication_1.PlatformApplication])
], Platform);
exports.Platform = Platform;
//# sourceMappingURL=Platform.js.map