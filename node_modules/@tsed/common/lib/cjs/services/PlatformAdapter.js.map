{"version":3,"file":"PlatformAdapter.js","sourceRoot":"","sources":["../../../src/services/PlatformAdapter.ts"],"names":[],"mappings":";;;AACA,iCAAyE;AAIzE,+CAA0C;AAE1C,MAAsB,eAAe;CAoCpC;AApCD,0CAoCC;AAMD,IAAA,qBAAgB,EAAC;IACf,OAAO,EAAE,eAAe;IACxB,IAAI,EAAE,CAAC,oBAAe,CAAC;IACvB,QAAQ,EAAE,yBAAW;CACtB,CAAC,CAAC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService, ProviderOpts, registerProvider} from \"@tsed/di\";\nimport {PlatformMulter, PlatformMulterSettings} from \"../config/interfaces/PlatformMulterSettings\";\nimport {PlatformStaticsOptions} from \"../config/interfaces/PlatformStaticsSettings\";\nimport {RouterOptions} from \"express\";\nimport {FakeAdapter} from \"./FakeAdapter\";\n\nexport abstract class PlatformAdapter<App = TsED.Application, Router = TsED.Router> {\n  /**\n   * Load providers in top priority\n   */\n  providers: ProviderOpts[];\n  /**\n   * Called after the injector instantiation\n   */\n  onInit?: () => any;\n  beforeLoadRoutes?: () => Promise<any>;\n  afterLoadRoutes?: () => Promise<any>;\n  useRouter?: () => any;\n  useContext?: () => any;\n\n  abstract app(): {app: App; callback(): any};\n\n  abstract router(routerOptions?: Partial<RouterOptions>): {router: Router; callback(): any};\n  /**\n   * Return the statics middlewares\n   * @param endpoint\n   * @param options\n   */\n  abstract statics(endpoint: string, options: PlatformStaticsOptions): any;\n\n  /**\n   * Return the multipart middleware\n   * @param options\n   */\n  abstract multipart(options: PlatformMulterSettings): PlatformMulter;\n\n  /**\n   * Return the body parser for the given\n   * @param type\n   * @param opts\n   */\n  abstract bodyParser(type: string, opts?: Record<string, any>): any;\n}\n\nexport interface PlatformBuilderSettings<App = TsED.Application, Router = TsED.Router> extends Partial<TsED.Configuration> {\n  adapter?: Type<PlatformAdapter<App, Router>>;\n}\n\nregisterProvider({\n  provide: PlatformAdapter,\n  deps: [InjectorService],\n  useClass: FakeAdapter\n});\n"]}