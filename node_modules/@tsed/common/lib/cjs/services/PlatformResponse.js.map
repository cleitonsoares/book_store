{"version":3,"file":"PlatformResponse.js","sourceRoot":"","sources":["../../../src/services/PlatformResponse.ts"],"names":[],"mappings":"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","sourcesContent":["import {isBoolean, isNumber, isStream, isString} from \"@tsed/core\";\nimport {Injectable, ProviderScope, Scope} from \"@tsed/di\";\nimport {OutgoingHttpHeaders, ServerResponse} from \"http\";\nimport onFinished from \"on-finished\";\nimport {IncomingEvent} from \"../interfaces/IncomingEvent\";\nimport type {PlatformRequest} from \"./PlatformRequest\";\nimport type {PlatformContext} from \"../domain/PlatformContext\";\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Response {\n      // req: any;\n    }\n  }\n}\n\nexport type HeaderValue = Array<boolean | number | string> | boolean | number | string;\n\n/**\n * Platform Response abstraction layer.\n * @platform\n */\n@Injectable()\n@Scope(ProviderScope.INSTANCE)\nexport class PlatformResponse<T extends Record<string, any> = any> {\n  /**\n   * The current @@PlatformRequest@@.\n   */\n  public request: PlatformRequest;\n\n  data: any;\n\n  raw: T;\n\n  constructor({response}: IncomingEvent, protected $ctx: PlatformContext) {\n    this.raw = response as any;\n  }\n\n  /**\n   * Get the current statusCode\n   */\n  get statusCode() {\n    return this.raw.statusCode;\n  }\n\n  /**\n   * An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to app.locals.\n   *\n   * This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.\n   */\n  get locals() {\n    return this.raw.locals;\n  }\n\n  /**\n   * Return the original response framework instance\n   */\n  get response() {\n    return this.getResponse();\n  }\n\n  /**\n   * Return the original response node.js instance\n   */\n  get res() {\n    return this.getRes();\n  }\n\n  static onFinished(res: any, cb: (er: Error | null, message: string) => void) {\n    onFinished(res, cb);\n  }\n\n  /**\n   * Returns the HTTP response header specified by field. The match is case-insensitive.\n   *\n   * ```typescript\n   * response.get('Content-Type') // => \"text/plain\"\n   * ```\n   *\n   * @param name\n   */\n  get(name: string) {\n    return this.raw.get(name);\n  }\n\n  getHeaders(): OutgoingHttpHeaders {\n    return this.raw.getHeaders();\n  }\n\n  /**\n   * Return the Framework response object (express, koa, etc...)\n   */\n  getResponse<Res = T>(): Res {\n    return this.raw as any;\n  }\n\n  /**\n   * Return the Node.js response object\n   */\n  getRes(): ServerResponse {\n    return this.raw as any;\n  }\n\n  hasStatus() {\n    return this.statusCode !== 200;\n  }\n\n  /**\n   * Sets the HTTP status for the response.\n   *\n   * @param status\n   */\n  status(status: number) {\n    this.raw.status(status);\n\n    return this;\n  }\n\n  /**\n   * Set header `field` to `val`, or pass\n   * an object of header fields.\n   *\n   * Examples:\n   * ```typescript\n   * response.setHeaders({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   * ```\n   *\n   * Aliased as `res.header()`.\n   */\n  setHeaders(headers: OutgoingHttpHeaders) {\n    // apply headers\n    Object.entries(headers).forEach(([key, item]) => {\n      this.setHeader(key, item);\n    });\n\n    return this;\n  }\n\n  setHeader(key: string, item: any) {\n    if (key.toLowerCase() === \"location\") {\n      return this.location(String(item));\n    }\n\n    this.raw.set(key, item);\n\n    return this;\n  }\n\n  /**\n   * Set `Content-Type` response header with `type` through `mime.lookup()`\n   * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n   *\n   * Examples:\n   *\n   *     res.type('.html');\n   *     res.type('html');\n   *     res.type('json');\n   *     res.type('application/json');\n   *     res.type('png');\n   */\n  contentType(contentType: string) {\n    this.raw.contentType(contentType);\n\n    return this;\n  }\n\n  contentLength(length: number) {\n    this.setHeader(\"Content-Length\", length);\n    return this;\n  }\n\n  getContentLength() {\n    if (this.get(\"Content-Length\")) {\n      return parseInt(this.get(\"Content-Length\"), 10) || 0;\n    }\n  }\n\n  getContentType() {\n    return (this.get(\"Content-Type\") || \"\").split(\";\")[0];\n  }\n\n  /**\n   * Sets the HTTP response Content-Disposition header field to “attachment”.\n   * If a filename is given, then it sets the Content-Type based on the extension name via res.type(), and sets the Content-Disposition “filename=” parameter.\n   *\n   * ```typescript\n   * res.attachment()\n   * // Content-Disposition: attachment\n   *\n   * res.attachment('path/to/logo.png')\n   * // Content-Disposition: attachment; filename=\"logo.png\"\n   * // Content-Type: image/png\n   * ```\n   *\n   * @param filename\n   */\n  attachment(filename: string) {\n    this.raw.attachment(filename);\n    return this;\n  }\n\n  /**\n   * Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an [HTTP status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n   * If not specified, status defaults to `302 Found`.\n   *\n   * @param status\n   * @param url\n   */\n  redirect(status: number, url: string) {\n    this.raw.redirect(status, url);\n\n    return this;\n  }\n\n  /**\n   * Sets the response Location HTTP header to the specified path parameter.\n   *\n   * @param location\n   */\n  location(location: string) {\n    this.raw.location(location);\n\n    return this;\n  }\n\n  /**\n   * Stream the given data.\n   *\n   * @param data\n   */\n  stream(data: any) {\n    data.pipe(this.raw);\n\n    return this;\n  }\n\n  /**\n   * Renders a view and sends the rendered HTML string to the client.\n   *\n   * @param path\n   * @param options\n   */\n  async render(path: string, options: any = {}) {\n    const {PlatformViews} = await import(\"@tsed/platform-views\");\n    const platformViews = await this.$ctx.injector.lazyInvoke(PlatformViews);\n\n    return platformViews.render(path, {\n      ...this.locals,\n      ...options\n    });\n  }\n\n  /**\n   * Send any data to your consumer.\n   *\n   * This method accept a ReadableStream, a plain object, boolean, string, number, null and undefined data.\n   * It choose the better way to send the data.\n   *\n   * @param data\n   */\n  body(data: any) {\n    this.data = data;\n    if (data === undefined) {\n      this.raw.send();\n\n      return this;\n    }\n\n    if (isStream(data)) {\n      this.stream(data);\n\n      return this;\n    }\n\n    if (Buffer.isBuffer(data)) {\n      if (!this.getContentType()) {\n        this.contentType(\"application/octet-stream\");\n      }\n\n      this.contentLength(data.length);\n      this.raw.send(data);\n\n      return this;\n    }\n\n    if (isBoolean(data) || isNumber(data) || isString(data) || data === null) {\n      this.raw.send(data);\n\n      return this;\n    }\n\n    this.raw.json(data);\n\n    return this;\n  }\n\n  getBody() {\n    return this.data;\n  }\n\n  /**\n   * Add a listener to handler the end of the request/response.\n   * @param cb\n   */\n  onEnd(cb: (er: Error | null, message: string) => void): this {\n    PlatformResponse.onFinished(this.getRes(), cb);\n\n    return this;\n  }\n\n  isDone(): boolean {\n    if (!this.raw) {\n      return true;\n    }\n\n    const res = this.getRes();\n\n    return Boolean(this.isHeadersSent() || res.writableEnded || res.writableFinished);\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.raw;\n    delete this.data;\n    // @ts-ignore\n    delete this.request;\n    // @ts-ignore\n    delete this.$ctx;\n  }\n\n  isHeadersSent() {\n    return this.getRes().headersSent;\n  }\n}\n"]}