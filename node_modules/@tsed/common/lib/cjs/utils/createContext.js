"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContext = void 0;
const PlatformContext_1 = require("../domain/PlatformContext");
const PlatformRequest_1 = require("../services/PlatformRequest");
const PlatformResponse_1 = require("../services/PlatformResponse");
const uuid_1 = require("uuid");
const defaultReqIdBuilder = (req) => req.get("x-request-id") || (0, uuid_1.v4)().replace(/-/gi, "");
/**
 * Create the TsED context to wrap request, response, injector, etc...
 * @param injector
 * @ignore
 */
function createContext(injector) {
    var _a, _b;
    const ResponseKlass = (_a = injector.getProvider(PlatformResponse_1.PlatformResponse)) === null || _a === void 0 ? void 0 : _a.useClass;
    const RequestKlass = (_b = injector.getProvider(PlatformRequest_1.PlatformRequest)) === null || _b === void 0 ? void 0 : _b.useClass;
    const { reqIdBuilder = defaultReqIdBuilder, ...loggerOptions } = injector.settings.logger || {};
    return async (event) => {
        const ctx = new PlatformContext_1.PlatformContext({
            event,
            id: reqIdBuilder(event.request),
            logger: injector.logger,
            ...loggerOptions,
            injector,
            ResponseKlass,
            RequestKlass
        });
        ctx.response.onEnd(async () => {
            await ctx.emit("$onResponse", ctx);
            await ctx.destroy();
        });
        await ctx.emit("$onRequest", ctx);
        return ctx;
    };
}
exports.createContext = createContext;
//# sourceMappingURL=createContext.js.map