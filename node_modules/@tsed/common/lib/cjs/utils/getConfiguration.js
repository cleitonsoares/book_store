"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguration = void 0;
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
function getConfiguration(configuration = {}, module = null) {
    if (configuration.$$resolved) {
        return configuration;
    }
    const store = module ? core_1.Store.from(module).get("configuration") || {} : {};
    const env = configuration.env || store.env || process.env.NODE_ENV || core_1.Env.DEV;
    const config = {
        $$resolved: true,
        exclude: ["**/*.spec.ts", "**/*.spec.js"],
        componentsScan: ["${rootDir}/mvc/**/*.ts", "${rootDir}/services/**/*.ts", "${rootDir}/middlewares/**/*.ts"],
        env,
        httpPort: 8080,
        httpsPort: false,
        ...store,
        ...configuration,
        scopes: {
            [di_1.ProviderType.CONTROLLER]: di_1.ProviderScope.SINGLETON,
            ...store.scopes,
            ...configuration.scopes
        },
        mount: store.mount || configuration.mount
            ? (0, core_1.deepMerge)(store.mount || {}, configuration.mount || {})
            : {
                "/rest": "${rootDir}/controllers/**/*.ts"
            },
        logger: {
            debug: false,
            level: env === core_1.Env.TEST ? "off" : "info",
            logRequest: true,
            ...store.logger,
            ...configuration.logger,
            jsonIndentation: process.env.NODE_ENV === core_1.Env.PROD ? 0 : 2
        }
    };
    if (!configuration.disableComponentsScan && store.componentsScan && configuration.componentsScan) {
        config.componentsScan = [...store.componentsScan, ...configuration.componentsScan];
    }
    return config;
}
exports.getConfiguration = getConfiguration;
//# sourceMappingURL=getConfiguration.js.map