import { GlobalProviders, ProviderType } from "@tsed/di";
import { getOperationsRoutes, OperationMethods } from "@tsed/schema";
import { ControllerProvider } from "../domain/ControllerProvider.js";
import { PlatformRouter } from "../services/PlatformRouter.js";
import { PlatformMiddlewaresChain } from "../services/PlatformMiddlewaresChain.js";
GlobalProviders.createRegistry(ProviderType.CONTROLLER, ControllerProvider, {
    onInvoke(provider, locals, { injector }) {
        const router = createRouter(injector, provider);
        locals.set(PlatformRouter, router);
    }
});
/**
 * @ignore
 */
function formatMethod(method) {
    return (method === OperationMethods.CUSTOM ? "use" : method || "use").toLowerCase();
}
/**
 * @ignore
 */
export function getRouter(injector, provider) {
    return injector.get(provider.tokenRouter);
}
/**
 * @ignore
 */
export function createRouter(injector, provider) {
    const token = provider.tokenRouter;
    if (injector.has(token)) {
        return getRouter(injector, provider);
    }
    const router = PlatformRouter.create(injector, provider.routerOptions);
    return injector
        .add(token, {
        useValue: router
    })
        .invoke(token);
}
/**
 * @ignore
 * @param injector
 * @param provider
 * @param parentUseBefore
 */
export function buildRouter(injector, provider, parentUseBefore = []) {
    const { middlewares: { useBefore }, children } = provider;
    // Controller lifecycle
    const router = createRouter(injector, provider);
    if (!router.isBuilt) {
        router.isBuilt = true;
        const platformMiddlewaresChain = injector.get(PlatformMiddlewaresChain);
        // build all endpoints and his middlewares
        getOperationsRoutes(provider.token).forEach((operationRoute) => {
            const handlers = platformMiddlewaresChain === null || platformMiddlewaresChain === void 0 ? void 0 : platformMiddlewaresChain.get(provider, operationRoute, parentUseBefore);
            router.addRoute({
                handlers,
                token: operationRoute.token,
                method: formatMethod(operationRoute.method),
                path: operationRoute.path,
                isFinal: operationRoute.isFinal
            });
        });
        const middlewares = [...parentUseBefore, ...useBefore];
        // build children controllers
        children.forEach((child) => {
            const childProvider = injector.getProvider(child);
            /* istanbul ignore next */
            if (!childProvider) {
                throw new Error("Controller component not found in the ControllerRegistry");
            }
            router.use(childProvider.path, buildRouter(injector, childProvider, middlewares));
        });
    }
    return router;
}
//# sourceMappingURL=PlatformControllerBuilder.js.map