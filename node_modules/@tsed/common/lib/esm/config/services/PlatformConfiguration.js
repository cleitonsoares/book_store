import { __decorate, __metadata } from "tslib";
import { getHostInfoFromPort } from "@tsed/core";
import { DIConfiguration, Injectable, ProviderScope } from "@tsed/di";
import { $log } from "@tsed/logger";
const rootDir = process.cwd();
/**
 * `PlatformConfiguration` contains all information about your Server configuration.
 */
let PlatformConfiguration = class PlatformConfiguration extends DIConfiguration {
    constructor() {
        super({ rootDir });
    }
    get version() {
        return this.getRaw("version");
    }
    set version(v) {
        this.setRaw("version", v);
    }
    get rootDir() {
        return this.getRaw("rootDir");
    }
    set rootDir(value) {
        this.setRaw("rootDir", value);
    }
    get port() {
        return this.httpPort;
    }
    set port(value) {
        this.httpPort = value;
    }
    get httpsOptions() {
        return this.getRaw("httpsOptions");
    }
    set httpsOptions(value) {
        this.setRaw("httpsOptions", value);
    }
    get httpPort() {
        return this.getRaw("httpPort");
    }
    set httpPort(value) {
        this.setRaw("httpPort", value);
    }
    get httpsPort() {
        return this.getRaw("httpsPort");
    }
    set httpsPort(value) {
        this.setRaw("httpsPort", value);
    }
    get env() {
        return this.getRaw("env");
    }
    set env(value) {
        this.setRaw("env", value);
    }
    get mount() {
        return this.get("mount");
    }
    set mount(value) {
        this.setRaw("mount", value);
    }
    /**
     * @deprecated
     */
    get componentsScan() {
        return this.resolve(this.getRaw("componentsScan"));
    }
    /**
     * @deprecated
     */
    set componentsScan(value) {
        this.setRaw("componentsScan", value);
    }
    get statics() {
        return this.getRaw("statics") || this.getRaw("serveStatic") || {};
    }
    set statics(value) {
        this.setRaw("statics", value);
    }
    get acceptMimes() {
        return this.getRaw("acceptMimes");
    }
    set acceptMimes(value) {
        this.setRaw("acceptMimes", value || []);
    }
    get debug() {
        return this.logger.level === "debug";
    }
    set debug(debug) {
        this.logger = { ...this.logger, level: debug ? "debug" : "info" };
    }
    get converter() {
        return this.get("converter") || {};
    }
    set converter(options) {
        this.setRaw("converter", options);
    }
    get logger() {
        return this.get("logger");
    }
    set logger(value) {
        const logger = { ...this.logger, ...value };
        logger.debug = logger.level === "debug";
        this.setRaw("logger", logger);
        this.setRaw("debug", logger.debug);
        if (logger.format) {
            $log.appenders.set("stdout", {
                type: "stdout",
                levels: ["info", "debug"],
                layout: {
                    type: "pattern",
                    pattern: logger.format
                }
            });
            $log.appenders.set("stderr", {
                levels: ["trace", "fatal", "error", "warn"],
                type: "stderr",
                layout: {
                    type: "pattern",
                    pattern: logger.format
                }
            });
        }
    }
    get exclude() {
        return this.get("exclude");
    }
    set exclude(exclude) {
        this.setRaw("exclude", exclude);
    }
    /**
     *
     * @returns {string|number}
     */
    getHttpPort() {
        return getHostInfoFromPort("http", this.getRaw("httpPort"));
    }
    /**
     *
     * @param settings
     */
    setHttpPort(settings) {
        this.setRaw("httpPort", `${settings.address}:${settings.port}`);
    }
    /**
     *
     * @returns {string|number}
     */
    getHttpsPort() {
        return getHostInfoFromPort("https", this.getRaw("httpsPort"));
    }
    /**
     *
     * @param settings
     */
    setHttpsPort(settings) {
        this.setRaw("httpsPort", `${settings.address}:${settings.port}`);
    }
    getBestHost() {
        const { httpsPort, httpPort } = this;
        if (httpsPort) {
            return this.getHttpsPort();
        }
        if (httpPort) {
            return this.getHttpPort();
        }
        return {
            toString() {
                return "/";
            }
        };
    }
};
PlatformConfiguration = __decorate([
    Injectable({
        scope: ProviderScope.SINGLETON,
        global: true
    }),
    __metadata("design:paramtypes", [])
], PlatformConfiguration);
export { PlatformConfiguration };
//# sourceMappingURL=PlatformConfiguration.js.map