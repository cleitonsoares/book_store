{"version":3,"file":"PlatformConfiguration.js","sourceRoot":"","sources":["../../../../src/config/services/PlatformConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import {Env, getHostInfoFromPort} from \"@tsed/core\";\nimport {DIConfiguration, Injectable, ProviderScope, TokenProvider} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport Https from \"https\";\nimport {ConverterSettings} from \"../interfaces/ConverterSettings\";\nimport {PlatformLoggerSettings} from \"../interfaces/PlatformLoggerSettings\";\n\nconst rootDir = process.cwd();\n\n/**\n * `PlatformConfiguration` contains all information about your Server configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class PlatformConfiguration extends DIConfiguration {\n  constructor() {\n    super({rootDir});\n  }\n\n  get version() {\n    return this.getRaw(\"version\");\n  }\n\n  set version(v: string) {\n    this.setRaw(\"version\", v);\n  }\n\n  get rootDir() {\n    return this.getRaw(\"rootDir\");\n  }\n\n  set rootDir(value: string) {\n    this.setRaw(\"rootDir\", value);\n  }\n\n  get port(): string | number | false {\n    return this.httpPort;\n  }\n\n  set port(value: string | number | false) {\n    this.httpPort = value;\n  }\n\n  get httpsOptions(): Https.ServerOptions {\n    return this.getRaw(\"httpsOptions\");\n  }\n\n  set httpsOptions(value: Https.ServerOptions) {\n    this.setRaw(\"httpsOptions\", value);\n  }\n\n  get httpPort(): string | number | false {\n    return this.getRaw(\"httpPort\");\n  }\n\n  set httpPort(value: string | number | false) {\n    this.setRaw(\"httpPort\", value);\n  }\n\n  get httpsPort(): string | number | false {\n    return this.getRaw(\"httpsPort\");\n  }\n\n  set httpsPort(value: string | number | false) {\n    this.setRaw(\"httpsPort\", value);\n  }\n\n  get env(): Env {\n    return this.getRaw(\"env\");\n  }\n\n  set env(value: Env) {\n    this.setRaw(\"env\", value);\n  }\n\n  get mount(): Record<string, TokenProvider[]> {\n    return this.get(\"mount\");\n  }\n\n  set mount(value: Record<string, TokenProvider[]>) {\n    this.setRaw(\"mount\", value);\n  }\n\n  /**\n   * @deprecated\n   */\n  get componentsScan(): string[] {\n    return this.resolve(this.getRaw(\"componentsScan\"));\n  }\n\n  /**\n   * @deprecated\n   */\n  set componentsScan(value: string[]) {\n    this.setRaw(\"componentsScan\", value);\n  }\n\n  get statics(): Record<string, (any | string)[]> {\n    return this.getRaw(\"statics\") || this.getRaw(\"serveStatic\") || {};\n  }\n\n  set statics(value: Record<string, (any | string)[]>) {\n    this.setRaw(\"statics\", value);\n  }\n\n  get acceptMimes(): string[] {\n    return this.getRaw(\"acceptMimes\");\n  }\n\n  set acceptMimes(value: string[]) {\n    this.setRaw(\"acceptMimes\", value || []);\n  }\n\n  get debug(): boolean {\n    return this.logger.level === \"debug\";\n  }\n\n  set debug(debug: boolean) {\n    this.logger = {...this.logger, level: debug ? \"debug\" : \"info\"};\n  }\n\n  get converter(): Partial<ConverterSettings> {\n    return this.get(\"converter\") || {};\n  }\n\n  set converter(options: Partial<ConverterSettings>) {\n    this.setRaw(\"converter\", options);\n  }\n\n  get logger(): Partial<PlatformLoggerSettings> {\n    return this.get(\"logger\");\n  }\n\n  set logger(value: Partial<PlatformLoggerSettings>) {\n    const logger = {...this.logger, ...value};\n    logger.debug = logger.level === \"debug\";\n\n    this.setRaw(\"logger\", logger);\n    this.setRaw(\"debug\", logger.debug);\n\n    if (logger.format) {\n      $log.appenders.set(\"stdout\", {\n        type: \"stdout\",\n        levels: [\"info\", \"debug\"],\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n\n      $log.appenders.set(\"stderr\", {\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n    }\n  }\n\n  get exclude() {\n    return this.get(\"exclude\");\n  }\n\n  set exclude(exclude: string[]) {\n    this.setRaw(\"exclude\", exclude);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): ReturnType<typeof getHostInfoFromPort> {\n    return getHostInfoFromPort(\"http\", this.getRaw(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort() {\n    return getHostInfoFromPort(\"https\", this.getRaw(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n\n  getBestHost() {\n    const {httpsPort, httpPort} = this;\n\n    if (httpsPort) {\n      return this.getHttpsPort();\n    }\n\n    if (httpPort) {\n      return this.getHttpPort();\n    }\n\n    return {\n      toString() {\n        return \"/\";\n      }\n    };\n  }\n}\n"]}