import { Provider, ProviderType } from "@tsed/di";
import { ROUTER_OPTIONS } from "../constants/routerOptions.js";
let AUTO_INC = 0;
export class ControllerProvider extends Provider {
    constructor(provide, options = {}) {
        super(provide, options);
        this.type = ProviderType.CONTROLLER;
        this.tokenRouter = `${this.name}_ROUTER_${AUTO_INC++}`;
    }
    /**
     *
     */
    get routerOptions() {
        return this.store.get(ROUTER_OPTIONS) || {};
    }
    /**
     *
     * @param value
     */
    set routerOptions(value) {
        this.store.set(ROUTER_OPTIONS, value);
    }
    /**
     *
     * @returns {any[]}
     */
    get middlewares() {
        return Object.assign({
            use: [],
            useAfter: [],
            useBefore: []
        }, this.store.get("middlewares", {}));
    }
    /**
     *
     * @param middlewares
     */
    set middlewares(middlewares) {
        const mdlwrs = this.middlewares;
        const concat = (key, a, b) => (a[key] = a[key].concat(b[key]));
        Object.keys(middlewares).forEach((key) => {
            concat(key, mdlwrs, middlewares);
        });
        this.store.set("middlewares", mdlwrs);
    }
}
//# sourceMappingURL=ControllerProvider.js.map