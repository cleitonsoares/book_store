import { DIContext } from "@tsed/di";
import { PlatformApplication } from "../services/PlatformApplication.js";
import { PlatformRequest } from "../services/PlatformRequest.js";
import { PlatformResponse } from "../services/PlatformResponse.js";
export class PlatformContext extends DIContext {
    constructor({ event, endpoint, ignoreUrlPatterns = [], ResponseKlass = PlatformResponse, RequestKlass = PlatformRequest, ...options }) {
        super({
            ...options,
            ignoreLog: () => {
                return this.ignoreUrlPatterns.find((reg) => !!this.url.match(reg));
            }
        });
        this.ignoreUrlPatterns = [];
        endpoint && (this.endpoint = endpoint);
        this.ignoreUrlPatterns = ignoreUrlPatterns.map((pattern) => typeof pattern === "string" ? new RegExp(pattern, "gi") : pattern);
        this.response = new ResponseKlass(event, this);
        this.request = new RequestKlass(event, this);
        this.response.request = this.request;
        this.request.response = this.response;
        this.request.request.$ctx = this;
        this.request.request.id = this.id;
        this.logger.url = this.url;
        this.container.set(PlatformResponse, this.response);
        this.container.set(PlatformRequest, this.request);
        this.container.set(PlatformContext, this);
        this.response.setHeader("x-request-id", this.id);
    }
    get url() {
        return this.request.url;
    }
    get app() {
        return this.injector.get(PlatformApplication);
    }
    async destroy() {
        var _a, _b;
        await super.destroy();
        (_b = (_a = this.request) === null || _a === void 0 ? void 0 : _a.request) === null || _b === void 0 ? true : delete _b.$ctx;
        this.response.destroy();
        this.request.destroy();
        // @ts-ignore
        delete this.endpoint;
        // @ts-ignore
        delete this.response;
        // @ts-ignore
        delete this.request;
    }
    isDone() {
        var _a, _b;
        if (!this.request || !this.response) {
            return true;
        }
        if ((_a = this.request) === null || _a === void 0 ? void 0 : _a.isAborted()) {
            return true;
        }
        return (_b = this.response) === null || _b === void 0 ? void 0 : _b.isDone();
    }
    /**
     * Return the framework request instance (Express, Koa, etc...)
     */
    getRequest() {
        return this.request.getRequest();
    }
    /**
     * Return the framework response instance (Express, Koa, etc...)
     */
    getResponse() {
        return this.response.getResponse();
    }
    /**
     * Get Node.js request
     */
    getReq() {
        return this.request.getReq();
    }
    /**
     * Get Node.js response
     */
    getRes() {
        return this.response.getRes();
    }
    /**
     * Return the original application instance.
     */
    getApp() {
        return this.app.getApp();
    }
}
//# sourceMappingURL=PlatformContext.js.map