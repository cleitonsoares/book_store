import { __decorate, __metadata } from "tslib";
import { Injectable, InjectorService, ProviderScope, ProviderType } from "@tsed/di";
import { concatPath, getJsonEntityStore, getOperationsRoutes, JsonEntityStore } from "@tsed/schema";
import { buildRouter, createRouter, getRouter } from "../builder/PlatformControllerBuilder.js";
import { PlatformRouteDetails } from "../domain/PlatformRouteDetails.js";
import { PlatformApplication } from "./PlatformApplication.js";
import { PlatformMiddlewaresChain } from "./PlatformMiddlewaresChain.js";
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let Platform = class Platform {
    constructor(injector, platformApplication) {
        this.injector = injector;
        this.platformApplication = platformApplication;
        this._routes = [];
        this._controllers = [];
        this.createRouters();
    }
    get app() {
        return this.platformApplication;
    }
    get routes() {
        return this._routes;
    }
    addRoutes(routes) {
        routes.forEach((routeSettings) => {
            this.addRoute(routeSettings.route, routeSettings.token);
        });
    }
    addRoute(basePath, token) {
        const { injector } = this;
        const provider = injector.getProvider(token);
        if (!provider || provider.hasParent()) {
            return;
        }
        this._controllers.push(...this.getAllControllers(basePath, token));
        const ctrlPath = concatPath(basePath, JsonEntityStore.from(provider.token).path);
        this.app.use(ctrlPath, ...[].concat(getRouter(injector, provider).callback()));
        this._routes = getOperationsRoutes(provider.token, {
            withChildren: true,
            basePath
        }).reduce((routes, operationRoute) => {
            if (injector.hasProvider(token)) {
                const provider = injector.getProvider(operationRoute.token);
                const route = new PlatformRouteDetails({
                    ...operationRoute,
                    provider
                });
                routes = routes.concat(route);
            }
            return routes;
        }, this._routes);
        return this;
    }
    /**
     * Get all routes built by TsExpressDecorators and mounted on Express application.
     * @returns {PlatformRouteDetails[]}
     */
    getRoutes() {
        return this._routes;
    }
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers() {
        return this._controllers;
    }
    $onInit() {
        this.buildControllers();
    }
    /**
     * Create routers from the collected controllers.
     * @private
     */
    createRouters() {
        const { injector } = this;
        injector.getProviders(ProviderType.CONTROLLER).map((provider) => {
            createRouter(injector, provider);
        });
    }
    /**
     * Get all router controllers from the controller token.
     * @private
     */
    getAllControllers(basePath, token) {
        const store = token.isStore ? token : getJsonEntityStore(token);
        const ctrlPath = concatPath(basePath, JsonEntityStore.from(token).path);
        const children = store.get("childrenControllers", []);
        return children
            .reduce((controllers, token) => {
            const childBasePath = concatPath(basePath, store.path);
            return controllers.concat(this.getAllControllers(childBasePath, token));
        }, [])
            .concat([
            {
                route: ctrlPath,
                provider: this.injector.getProvider(token)
            }
        ]);
    }
    /**
     * Create controllers from DI
     * @private
     */
    buildControllers() {
        const { injector } = this;
        injector.getProviders(ProviderType.CONTROLLER).map((provider) => {
            if (!provider.hasParent()) {
                return buildRouter(injector, provider);
            }
        });
    }
};
Platform = __decorate([
    Injectable({
        scope: ProviderScope.SINGLETON,
        imports: [PlatformMiddlewaresChain]
    }),
    __metadata("design:paramtypes", [InjectorService, PlatformApplication])
], Platform);
export { Platform };
//# sourceMappingURL=Platform.js.map