import { __decorate, __metadata } from "tslib";
import { Constant, Inject, Injectable } from "@tsed/di";
import { ParamTypes } from "@tsed/platform-params";
import { JsonEntityStore } from "@tsed/schema";
import { bindEndpointMiddleware } from "../middlewares/bindEndpointMiddleware.js";
import { PlatformAcceptMimesMiddleware } from "../middlewares/PlatformAcceptMimesMiddleware.js";
import { PlatformMulterMiddleware } from "../middlewares/PlatformMulterMiddleware.js";
import { useCtxHandler } from "../utils/useCtxHandler.js";
import { PlatformAdapter } from "../services/PlatformAdapter.js";
import { isClass } from "@tsed/core";
let PlatformMiddlewaresChain = class PlatformMiddlewaresChain {
    get(provider, operationRoute, parentMiddlewares = []) {
        const { endpoint } = operationRoute;
        const { beforeMiddlewares, middlewares: mldwrs, afterMiddlewares } = endpoint;
        const { middlewares: { useBefore, use, useAfter } } = provider;
        const allMiddlewares = [
            ...parentMiddlewares,
            ...useBefore,
            ...beforeMiddlewares,
            ...use,
            ...mldwrs,
            endpoint,
            ...afterMiddlewares,
            ...useAfter
        ];
        const { ACCEPT_MIMES, FILE, RAW_BODY, BODY } = this.getParamTypes(allMiddlewares, operationRoute);
        return [
            useCtxHandler(bindEndpointMiddleware(endpoint)),
            ACCEPT_MIMES && PlatformAcceptMimesMiddleware,
            FILE && PlatformMulterMiddleware,
            !FILE && RAW_BODY && this.adapter.bodyParser("raw"),
            !FILE && !RAW_BODY && BODY && this.adapter.bodyParser("json"),
            !FILE && !RAW_BODY && BODY && this.adapter.bodyParser("urlencoded"),
            ...allMiddlewares
        ].filter(Boolean);
    }
    hasAcceptMimes(operationRoute) {
        return operationRoute.endpoint.acceptMimes.length || this.acceptMimes.length;
    }
    getParamTypes(middlewares, operationRoute) {
        return middlewares.filter(isClass).reduce((paramTypes, token) => {
            if (token !== operationRoute.endpoint) {
                const entity = JsonEntityStore.fromMethod(token, "use");
                if (entity.decoratorType === "method") {
                    const { FILE, RAW_BODY, BODY } = entity.getParamTypes();
                    paramTypes.FILE = paramTypes.FILE || FILE;
                    paramTypes.RAW_BODY = paramTypes.RAW_BODY || RAW_BODY;
                    paramTypes.BODY = paramTypes.BODY || BODY;
                }
            }
            return paramTypes;
        }, {
            ACCEPT_MIMES: this.hasAcceptMimes(operationRoute),
            FILE: operationRoute.has(ParamTypes.FILES),
            RAW_BODY: operationRoute.has(ParamTypes.RAW_BODY),
            BODY: operationRoute.has(ParamTypes.BODY)
        });
    }
};
__decorate([
    Constant("acceptMimes", []),
    __metadata("design:type", Array)
], PlatformMiddlewaresChain.prototype, "acceptMimes", void 0);
__decorate([
    Inject(),
    __metadata("design:type", PlatformAdapter)
], PlatformMiddlewaresChain.prototype, "adapter", void 0);
PlatformMiddlewaresChain = __decorate([
    Injectable()
], PlatformMiddlewaresChain);
export { PlatformMiddlewaresChain };
//# sourceMappingURL=PlatformMiddlewaresChain.js.map