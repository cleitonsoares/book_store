import { ProviderScope } from "@tsed/di";
import { getHostInfoFromPort } from "@tsed/core";
import Http from "http";
import { HttpServer } from "../decorators/httpServer.js";
import { listenServer } from "./listenServer.js";
export function createHttpServer(injector, requestListener) {
    const { settings } = injector;
    const httpPort = settings.getRaw("httpPort");
    const httpOptions = settings.getRaw("httpOptions");
    const server = httpPort !== false ? Http.createServer(httpOptions, requestListener) : null;
    injector.addProvider(HttpServer, {
        scope: ProviderScope.SINGLETON,
        useValue: server
    });
    injector.addProvider(Http.Server, {
        scope: ProviderScope.SINGLETON,
        useValue: server
    });
    injector.invoke(HttpServer);
    injector.invoke(Http.Server);
    if (server) {
        const hostInfo = getHostInfoFromPort("http", httpPort);
        return async () => {
            const resolvedHostInfo = await listenServer(injector, server, hostInfo);
            settings.setRaw("httpPort", `${resolvedHostInfo.address}:${resolvedHostInfo.port}`);
            return server;
        };
    }
}
//# sourceMappingURL=createHttpServer.js.map