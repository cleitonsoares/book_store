import { InjectorService, setLoggerLevel } from "@tsed/di";
import { $log } from "@tsed/logger";
import { toMap } from "@tsed/core";
import { PlatformConfiguration } from "../config/services/PlatformConfiguration.js";
import { PlatformHandler } from "../services/PlatformHandler.js";
import { PlatformResponse } from "../services/PlatformResponse.js";
import { PlatformRouter } from "../services/PlatformRouter.js";
import { PlatformApplication } from "../services/PlatformApplication.js";
import { Platform } from "../services/Platform.js";
import { PlatformRequest } from "../services/PlatformRequest.js";
import { PlatformAdapter } from "../services/PlatformAdapter.js";
$log.name = "TSED";
const DEFAULT_PROVIDERS = [
    { provide: PlatformHandler },
    { provide: PlatformResponse },
    { provide: PlatformRequest },
    { provide: PlatformRouter },
    { provide: PlatformApplication },
    { provide: Platform }
];
export function createInjector({ adapter, settings = {} }) {
    const injector = new InjectorService();
    injector.addProvider(PlatformConfiguration);
    injector.settings = injector.invoke(PlatformConfiguration);
    injector.logger = $log;
    injector.settings.set(settings);
    if (adapter) {
        injector.addProvider(PlatformAdapter, {
            useClass: adapter
        });
    }
    injector.invoke(PlatformAdapter);
    setLoggerLevel(injector);
    const instance = injector.get(PlatformAdapter);
    instance.providers = [...DEFAULT_PROVIDERS, ...instance.providers];
    toMap(instance.providers, "provide").forEach((provider, token) => {
        injector.addProvider(token, provider);
    });
    injector.invoke(PlatformApplication);
    return injector;
}
//# sourceMappingURL=createInjector.js.map