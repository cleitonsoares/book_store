/// <reference types="node" />
import { Type } from "@tsed/core";
import { InjectorService, ProviderOpts, TokenProvider } from "@tsed/di";
import { Platform } from "../services/Platform";
import { PlatformApplication } from "../services/PlatformApplication";
import type { IncomingMessage, ServerResponse } from "http";
import { PlatformAdapter, PlatformBuilderSettings } from "../services/PlatformAdapter";
/**
 * @platform
 */
export declare class PlatformBuilder<App = TsED.Application, Router = TsED.Router> {
    #private;
    static adapter: Type<PlatformAdapter<any, any>>;
    readonly name: string;
    protected startedAt: Date;
    protected current: Date;
    protected constructor(adapter: Type<PlatformAdapter<App, Router>> | undefined, module: Type, settings: Partial<TsED.Configuration>);
    get injector(): InjectorService;
    get rootModule(): any;
    get app(): PlatformApplication<App, Router>;
    get platform(): Platform;
    get adapter(): PlatformAdapter<App, Router>;
    /**
     * Return the settings configured by the decorator @@Configuration@@.
     *
     * ```typescript
     * @Configuration({
     *    rootDir: Path.resolve(__dirname),
     *    port: 8000,
     *    httpsPort: 8080,
     *    mount: {
     *      "/rest": "${rootDir}/controllers/**\/*.js"
     *    }
     * })
     * export class Server {
     *     $onInit(){
     *         console.log(this.settings); // {rootDir, port, httpsPort,...}
     *     }
     * }
     * ```
     *
     * @returns {PlatformConfiguration}
     */
    get settings(): TsED.Configuration & import("@tsed/di").DIConfiguration;
    get logger(): import("@tsed/di").DILogger;
    get disableBootstrapLog(): any;
    static create<App = TsED.Application, Router = TsED.Router>(module: Type<any>, settings: PlatformBuilderSettings<App, Router>): PlatformBuilder<App, Router>;
    static build<App = TsED.Application, Router = TsED.Router>(module: Type<any>, { adapter, ...settings }: PlatformBuilderSettings<App, Router>): PlatformBuilder<App, Router>;
    /**
     * Bootstrap a server application
     * @param module
     * @param settings
     */
    static bootstrap<App = TsED.Application, Router = TsED.Router>(module: Type<any>, settings: PlatformBuilderSettings<App, Router>): Promise<PlatformBuilder<App, Router>>;
    callback(): (req: IncomingMessage, res: ServerResponse) => void;
    callback(req: IncomingMessage, res: ServerResponse): void;
    log(...data: any[]): any;
    /**
     * Add classes to the components list
     * @param classes
     * @deprecated
     */
    addComponents(classes: any | any[]): this;
    /**
     * Add classes decorated by @@Controller@@ to components container.
     *
     * ### Example
     *
     * ```typescript
     * @Controller('/ctrl')
     * class MyController{
     * }
     *
     * platform.addControllers('/rest', [MyController])
     * ```
     *
     * ::: tip
     * If the MyController class isn't decorated, the class will be ignored.
     * :::
     *
     * @param {string} endpoint
     * @param {any[]} controllers
     */
    addControllers(endpoint: string, controllers: TokenProvider | TokenProvider[]): void;
    runLifecycle(): Promise<this>;
    loadInjector(): Promise<void>;
    listen(network?: boolean): Promise<void>;
    stop(): Promise<void>;
    ready(): Promise<void>;
    callHook(hook: string, ...args: any[]): Promise<void>;
    loadStatics(hook: string): Promise<void>;
    useProvider(token: Type<any>, settings?: Partial<ProviderOpts>): this;
    bootstrap(): Promise<this>;
    protected loadRoutes(): Promise<void>;
    protected diff(): string;
    /**
     * Load middlewares from configuration for the given hook
     * @param hook
     * @protected
     */
    protected loadMiddlewaresFor(hook: string): void;
    protected createHttpServers(): void;
    protected listenServers(): Promise<void>;
    protected logRoutes(): Promise<void>;
}
