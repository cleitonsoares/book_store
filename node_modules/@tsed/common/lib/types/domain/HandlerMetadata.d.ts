import { Type } from "@tsed/core";
import { ProviderScope } from "@tsed/di";
import { JsonParameterStore } from "@tsed/schema";
import { HandlerType } from "../interfaces/HandlerType";
import { PlatformRouteOptions, PlatformRouteWithoutHandlers } from "../interfaces/PlatformRouteOptions";
export interface HandlerMetadataOptions {
    target: (Type<any> | Function) & {
        type?: HandlerType;
    };
    routeOptions?: PlatformRouteWithoutHandlers;
    token?: Type<any>;
    propertyKey?: string | symbol;
    scope?: ProviderScope;
    type?: HandlerType;
}
export declare class HandlerMetadata {
    readonly target: any;
    readonly token: Type<any>;
    readonly propertyKey: string | symbol;
    readonly injectable: boolean;
    readonly type: HandlerType;
    readonly hasNextFunction: boolean;
    readonly routeOptions: Partial<PlatformRouteOptions>;
    readonly scope: ProviderScope;
    handler: any;
    constructor(options: HandlerMetadataOptions);
    get hasErrorParam(): boolean;
    getParams(): JsonParameterStore[];
    hasParamType(paramType: any): boolean;
    isFinal(): boolean;
    toString(): string;
}
