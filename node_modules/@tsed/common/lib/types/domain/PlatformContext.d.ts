/// <reference types="node" />
import { ContextMethods, DIContext, DIContextOptions } from "@tsed/di";
import { IncomingMessage, ServerResponse } from "http";
import { EndpointMetadata } from "@tsed/schema";
import { PlatformApplication } from "../services/PlatformApplication";
import { PlatformRequest } from "../services/PlatformRequest";
import { PlatformResponse } from "../services/PlatformResponse";
declare global {
    namespace TsED {
        interface Context extends PlatformContext {
        }
    }
}
export interface PlatformContextOptions extends DIContextOptions {
    event: {
        response?: ServerResponse;
        request?: IncomingMessage;
    };
    ignoreUrlPatterns?: any[];
    endpoint?: EndpointMetadata;
}
export declare class PlatformContext extends DIContext implements ContextMethods {
    /**
     * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.
     */
    endpoint: EndpointMetadata;
    /**
     * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.
     */
    data: any;
    /**
     * The current @@PlatformResponse@@.
     */
    response: PlatformResponse;
    /**
     * The current @@PlatformRequest@@.
     */
    request: PlatformRequest;
    private ignoreUrlPatterns;
    constructor({ event, endpoint, ignoreUrlPatterns, ResponseKlass, RequestKlass, ...options }: PlatformContextOptions);
    get url(): string;
    get app(): PlatformApplication<TsED.Application, TsED.Router>;
    destroy(): Promise<void>;
    isDone(): boolean;
    /**
     * Return the framework request instance (Express, Koa, etc...)
     */
    getRequest<Req = any>(): Req;
    /**
     * Return the framework response instance (Express, Koa, etc...)
     */
    getResponse<Res = any>(): Res;
    /**
     * Get Node.js request
     */
    getReq(): IncomingMessage;
    /**
     * Get Node.js response
     */
    getRes(): ServerResponse;
    /**
     * Return the original application instance.
     */
    getApp<T = any>(): T;
}
