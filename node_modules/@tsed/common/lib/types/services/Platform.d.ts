import { InjectorService, TokenProvider } from "@tsed/di";
import { PlatformRouteDetails } from "../domain/PlatformRouteDetails";
import { Route, RouteController } from "../interfaces/Route";
import { PlatformApplication } from "./PlatformApplication";
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
export declare class Platform {
    readonly injector: InjectorService;
    readonly platformApplication: PlatformApplication;
    private _routes;
    private _controllers;
    constructor(injector: InjectorService, platformApplication: PlatformApplication);
    get app(): PlatformApplication<TsED.Application, TsED.Router>;
    get routes(): PlatformRouteDetails[];
    addRoutes(routes: Route[]): void;
    addRoute(basePath: string, token: TokenProvider): this | undefined;
    /**
     * Get all routes built by TsExpressDecorators and mounted on Express application.
     * @returns {PlatformRouteDetails[]}
     */
    getRoutes(): PlatformRouteDetails[];
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers(): RouteController[];
    protected $onInit(): void;
    /**
     * Create routers from the collected controllers.
     * @private
     */
    private createRouters;
    /**
     * Get all router controllers from the controller token.
     * @private
     */
    private getAllControllers;
    /**
     * Create controllers from DI
     * @private
     */
    private buildControllers;
}
