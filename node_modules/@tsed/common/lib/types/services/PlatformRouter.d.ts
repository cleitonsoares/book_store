import { InjectorService, PathType } from "@tsed/di";
import { PlatformHandler } from "./PlatformHandler";
import { PlatformRouteOptions, PlatformRouteWithoutHandlers } from "../interfaces/PlatformRouteOptions";
import { PlatformStaticsOptions } from "../config/interfaces/PlatformStaticsSettings";
import { PlatformMulter, PlatformMulterSettings } from "../config/interfaces/PlatformMulterSettings";
import { PlatformAdapter } from "./PlatformAdapter";
import { RouterOptions } from "express";
/**
 * @ignore
 */
export declare const PLATFORM_ROUTER_OPTIONS: unique symbol;
declare global {
    namespace TsED {
        interface Router {
        }
    }
}
/**
 * Platform Router abstraction layer.
 * @platform
 */
export declare class PlatformRouter<App = TsED.Application, Router = TsED.Router> {
    protected platformHandler: PlatformHandler;
    readonly adapter: PlatformAdapter<App, Router>;
    rawRouter: Router;
    raw: any;
    isBuilt: boolean;
    injector: InjectorService;
    callback: () => any;
    constructor(platformHandler: PlatformHandler, adapter: PlatformAdapter<App, Router>, routerOptions?: Partial<RouterOptions>);
    /**
     * Create a new instance of PlatformRouter
     * @param injector
     * @param routerOptions
     */
    static create(injector: InjectorService, routerOptions?: any): PlatformRouter<TsED.Application, TsED.Router>;
    getRouter(): Router;
    use(...handlers: any[]): this;
    addRoute(options: Partial<PlatformRouteOptions>): this;
    all(path: PathType, ...handlers: any[]): this;
    get(path: PathType, ...handlers: any[]): this;
    post(path: PathType, ...handlers: any[]): this;
    put(path: PathType, ...handlers: any[]): this;
    delete(path: PathType, ...handlers: any[]): this;
    patch(path: PathType, ...handlers: any[]): this;
    head(path: PathType, ...handlers: any[]): this;
    options(path: PathType, ...handlers: any[]): this;
    statics(path: string, options: PlatformStaticsOptions): this;
    multer(options: PlatformMulterSettings): PlatformMulter;
    protected mapHandlers(handlers: any[], options?: PlatformRouteWithoutHandlers): any[];
}
