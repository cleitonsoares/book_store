import { __decorate } from "tslib";
import * as Util from "util";
import { BaseLayout } from "../class/BaseLayout.js";
import { Layout } from "../decorators/layout.js";
import { removeColors } from "../utils/colorizeUtils.js";
let JsonLayout = class JsonLayout extends BaseLayout {
    transform(loggingEvent, timezoneOffset) {
        const log = {
            ...loggingEvent.context.toJSON(),
            startTime: loggingEvent.startTime,
            categoryName: loggingEvent.categoryName,
            level: loggingEvent.level.toString()
        };
        log.data = loggingEvent.data.reduce((data, current) => {
            if (typeof current === "object") {
                Object.assign(log, current);
                if (current.data) {
                    return [].concat(data, current.data);
                }
                return data;
            }
            return [...data, removeColors(Util.format(current))];
        }, []);
        return JSON.stringify(log) + (this.config["separator"] || "");
    }
};
JsonLayout = __decorate([
    Layout({ name: "json" })
], JsonLayout);
export { JsonLayout };
//# sourceMappingURL=JsonLayout.js.map