"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importProviders = void 0;
const di_1 = require("@tsed/di");
const core_1 = require("@tsed/core");
const importFiles_1 = require("./importFiles");
const lookup = ["imports", "componentsScan", "mount"];
async function resolveRecursively(items, exclude, rootDir) {
    for (const index in items) {
        if ((0, core_1.isString)(items[index])) {
            items[index] = await (0, importFiles_1.importFiles)(items[index].replace("${rootDir}", rootDir), exclude);
        }
    }
    const providers = items.flat().filter(core_1.isClass);
    for (const token of providers) {
        const provider = di_1.GlobalProviders.get(token);
        if ((provider === null || provider === void 0 ? void 0 : provider.type) === di_1.ProviderType.MODULE && provider.configuration) {
            provider.configuration.exclude = exclude;
            provider.configuration.rootDir = provider.configuration.rootDir || rootDir;
            provider.configuration = await importProviders(provider.configuration);
        }
    }
    return providers;
}
/**
 * Lookup settings and replace glob pattern by the resolved providers
 *
 * @param settings
 */
async function importProviders(settings) {
    const { exclude = [], rootDir } = settings;
    for (const property of lookup) {
        if (settings[property]) {
            if (!(0, core_1.isArray)(settings[property])) {
                const current = settings[property];
                const promises = Object.entries(current).map(async ([key, items]) => {
                    current[key] = await resolveRecursively([].concat(items), exclude, rootDir);
                });
                await Promise.all(promises);
            }
            else {
                settings[property] = await resolveRecursively(settings[property], exclude, rootDir);
            }
        }
    }
    settings.disableComponentsScan = true;
    return settings;
}
exports.importProviders = importProviders;
//# sourceMappingURL=importProviders.js.map