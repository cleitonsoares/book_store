"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepExtends = void 0;
const createInstance_1 = require("./createInstance");
const isArray_1 = require("./isArray");
const isPrimitive_1 = require("./isPrimitive");
const objectKeys_1 = require("./objectKeys");
function reducer() {
    return (collection, value) => {
        collection.indexOf(value) === -1 && collection.push(value);
        return collection;
    };
}
/**
 * Deep extends a model with another one.
 * @param out
 * @param obj
 * @param reducers
 * @returns {any}
 * @deprecated Since 2021-07-16. Use deepMerge instead of
 */
function deepExtends(out, obj, reducers = {}) {
    if (obj === undefined || obj === null) {
        return out;
    }
    if ((0, isPrimitive_1.isPrimitive)(obj) || typeof obj === "symbol" || typeof obj === "function") {
        return obj;
    }
    if ((0, isArray_1.isArrayOrArrayClass)(obj)) {
        out = out || [];
    }
    else {
        out = out || (0, createInstance_1.createInstance)(obj);
    }
    const defaultReducer = reducers["default"] ? reducers["default"] : reducer();
    const set = (key, value) => {
        if ((0, isArray_1.isArrayOrArrayClass)(obj)) {
            out.indexOf(value) === -1 && out.push(value);
        }
        else {
            out[key] = value;
        }
    };
    (0, objectKeys_1.objectKeys)(obj).forEach((key) => {
        let value = obj[key];
        // istanbul ignore next
        if (value === undefined || value === null) {
            return;
        }
        // istanbul ignore next
        if (value === "" && out[key] !== "") {
            return;
        }
        if ((0, isPrimitive_1.isPrimitive)(value) || typeof value === "function") {
            set(key, value);
            return;
        }
        if ((0, isArray_1.isArrayOrArrayClass)(value)) {
            value = value.map((value) => deepExtends(undefined, value));
            set(key, []
                .concat(out[key] || [], value)
                .reduce((collection, value) => (reducers[key] ? reducers[key](collection, value) : defaultReducer(collection, value)), []));
            return;
        }
        // Object
        if ((0, isArray_1.isArrayOrArrayClass)(obj)) {
            set(key, deepExtends(undefined, value, reducers));
        }
        else {
            set(key, deepExtends(out[key], value, reducers));
        }
    });
    if ((0, isArray_1.isArrayOrArrayClass)(out)) {
        out.reduce((collection, value) => defaultReducer(collection, value), []);
    }
    return out;
}
exports.deepExtends = deepExtends;
//# sourceMappingURL=deepExtends.js.map