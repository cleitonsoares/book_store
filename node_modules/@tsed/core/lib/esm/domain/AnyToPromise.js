var _AnyToPromise_resolves, _AnyToPromise_rejects, _AnyToPromise_hasNextFunction, _AnyToPromise_promise;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { isObservable } from "../utils/objects/isObservable.js";
import { isPromise } from "../utils/objects/isPromise.js";
import { isStream } from "../utils/objects/isStream.js";
/**
 * @ignore
 */
function isResponse(obj) {
    return obj.data && obj.headers && obj.status && obj.statusText;
}
/**
 * @ignore
 */
export var AnyToPromiseStatus;
(function (AnyToPromiseStatus) {
    AnyToPromiseStatus["PENDING"] = "PENDING";
    AnyToPromiseStatus["CANCELED"] = "CANCELED";
    AnyToPromiseStatus["RESOLVED"] = "RESOLVED";
    AnyToPromiseStatus["REJECTED"] = "REJECTED";
})(AnyToPromiseStatus || (AnyToPromiseStatus = {}));
export var AnyToPromiseResponseTypes;
(function (AnyToPromiseResponseTypes) {
    AnyToPromiseResponseTypes["STREAM"] = "STREAM";
    AnyToPromiseResponseTypes["BUFFER"] = "BUFFER";
    AnyToPromiseResponseTypes["DATA"] = "DATA";
})(AnyToPromiseResponseTypes || (AnyToPromiseResponseTypes = {}));
export class AnyToPromise {
    constructor({ hasNextFunction = false } = {}) {
        this.status = AnyToPromiseStatus.PENDING;
        _AnyToPromise_resolves.set(this, void 0);
        _AnyToPromise_rejects.set(this, void 0);
        _AnyToPromise_hasNextFunction.set(this, false);
        _AnyToPromise_promise.set(this, void 0);
        __classPrivateFieldSet(this, _AnyToPromise_hasNextFunction, hasNextFunction, "f");
        __classPrivateFieldSet(this, _AnyToPromise_promise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _AnyToPromise_resolves, resolve, "f");
            __classPrivateFieldSet(this, _AnyToPromise_rejects, reject, "f");
        }), "f");
    }
    isDone() {
        return this.status !== AnyToPromiseStatus.PENDING;
    }
    get next() {
        __classPrivateFieldSet(this, _AnyToPromise_hasNextFunction, true, "f");
        return (error) => {
            if (this.isDone()) {
                return;
            }
            return error ? this.reject(error) : this.resolve({ type: AnyToPromiseResponseTypes.DATA });
        };
    }
    /**
     *
     */
    async call(cb) {
        if (this.isDone()) {
            return this;
        }
        try {
            this.handle(cb());
        }
        catch (er) {
            this.reject(er);
        }
        return __classPrivateFieldGet(this, _AnyToPromise_promise, "f");
    }
    reject(er) {
        if (this.isDone()) {
            return;
        }
        this.done(AnyToPromiseStatus.REJECTED);
        __classPrivateFieldGet(this, _AnyToPromise_rejects, "f").call(this, er);
    }
    resolve(response = {}) {
        if (this.isDone()) {
            return;
        }
        this.done(AnyToPromiseStatus.RESOLVED);
        __classPrivateFieldGet(this, _AnyToPromise_resolves, "f").call(this, { ...response, state: AnyToPromiseStatus.RESOLVED });
    }
    destroy() { }
    cancel() {
        if (this.isDone()) {
            return;
        }
        this.done(AnyToPromiseStatus.CANCELED);
        return __classPrivateFieldGet(this, _AnyToPromise_resolves, "f").call(this, { state: AnyToPromiseStatus.CANCELED });
    }
    done(status) {
        this.destroy();
        this.status = status;
    }
    handle(process, additionalProps = {}) {
        if (this.isDone()) {
            return;
        }
        if (process) {
            if (this.isCanceledResponse(process)) {
                // ABANDON
                return this.cancel();
            }
            if (isObservable(process)) {
                process = process.toPromise();
            }
            if (isResponse(process)) {
                return this.handle(process.data, {
                    ...additionalProps,
                    status: process.status,
                    headers: process.headers
                });
            }
            if (isStream(process)) {
                return this.resolve({ ...additionalProps, type: AnyToPromiseResponseTypes.STREAM, data: process });
            }
            if (isStream(process) || Buffer.isBuffer(process)) {
                return this.resolve({ ...additionalProps, type: AnyToPromiseResponseTypes.BUFFER, data: process });
            }
            if (isPromise(process)) {
                return process
                    .then((result) => this.handle(result, additionalProps))
                    .catch((error) => {
                    if (error.response && isResponse(error.response)) {
                        return this.handle(error.response);
                    }
                    return this.reject(error);
                });
            }
        }
        if (!__classPrivateFieldGet(this, _AnyToPromise_hasNextFunction, "f")) {
            // no next function and empty response
            return this.resolve({
                ...additionalProps,
                data: process,
                type: AnyToPromiseResponseTypes.DATA
            });
        }
    }
    isCanceledResponse(process) {
        return process === AnyToPromiseStatus.CANCELED;
    }
}
_AnyToPromise_resolves = new WeakMap(), _AnyToPromise_rejects = new WeakMap(), _AnyToPromise_hasNextFunction = new WeakMap(), _AnyToPromise_promise = new WeakMap();
//# sourceMappingURL=AnyToPromise.js.map