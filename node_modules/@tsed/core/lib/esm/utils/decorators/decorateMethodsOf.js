import { classOf } from "../objects/classOf.js";
import { methodsOf } from "../objects/methodsOf.js";
import { prototypeOf } from "../objects/prototypeOf.js";
import { descriptorOf } from "../objects/descriptorOf.js";
import { Store } from "../../domain/Store.js";
export function decorateMethodsOf(klass, decorator) {
    methodsOf(klass).forEach(({ target, propertyKey }) => {
        if (target !== classOf(klass)) {
            Object.defineProperty(prototypeOf(klass), propertyKey, {
                writable: true,
                value(...args) {
                    return prototypeOf(target)[propertyKey].apply(this, args);
                }
            });
            Store.mergeStoreMethodFrom(klass, target, propertyKey);
        }
        decorator(prototypeOf(klass), propertyKey, descriptorOf(klass, propertyKey));
    });
}
//# sourceMappingURL=decorateMethodsOf.js.map