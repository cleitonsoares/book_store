{"version":3,"file":"ContextLogger.js","sourceRoot":"","sources":["../../../src/domain/ContextLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import {levels, LogLevel} from \"@tsed/logger\";\n\nexport interface ContextLoggerOptions extends Record<string, any> {\n  id: string;\n  url?: string;\n  dateStart?: Date;\n  level?: \"debug\" | \"info\" | \"warn\" | \"error\" | \"off\" | \"all\";\n  maxStackSize?: number;\n  minimalRequestPicker?: (o: any) => any;\n  completeRequestPicker?: (o: any) => any;\n  ignoreLog?: (data: any) => boolean;\n  additionalProps?: Record<any, any>;\n}\n\nexport class ContextLogger {\n  id: string;\n  url: string;\n  minimalRequestPicker: Function;\n  completeRequestPicker: Function;\n  maxStackSize: number;\n  private readonly additionalProps: Record<string, unknown>;\n  private readonly dateStart: Date;\n  private readonly ignoreLog: (data: any) => boolean;\n  private stack: any = [];\n  private level: LogLevel;\n\n  constructor(\n    private logger: any,\n    {\n      id,\n      url = \"\",\n      dateStart = new Date(),\n      ignoreUrlPatterns = [],\n      minimalRequestPicker,\n      completeRequestPicker,\n      level = \"all\",\n      maxStackSize = 30,\n      ignoreLog,\n      additionalProps\n    }: ContextLoggerOptions\n  ) {\n    this.id = id;\n    this.url = url;\n    this.additionalProps = additionalProps || {};\n    this.dateStart = dateStart;\n    this.ignoreLog = ignoreLog || (() => false);\n    this.minimalRequestPicker = minimalRequestPicker || ((l: any) => l);\n    this.completeRequestPicker = completeRequestPicker || ((l: any) => l);\n    // @ts-ignore\n    this.level = levels()[level.toUpperCase()] || levels().ALL;\n    this.maxStackSize = maxStackSize;\n  }\n\n  info(obj: any) {\n    this.run(levels().INFO, obj, (obj) => this.minimalRequestPicker(this.getData(obj)));\n    return this;\n  }\n\n  debug(obj: any, withRequest: boolean = true) {\n    this.run(levels().DEBUG, obj, (obj) => {\n      obj = this.getData(obj);\n      return withRequest ? this.completeRequestPicker(obj) : obj;\n    });\n    return this;\n  }\n\n  warn(obj: any) {\n    this.run(levels().WARN, obj, (obj) => this.completeRequestPicker(this.getData(obj)));\n    return this;\n  }\n\n  error(obj: any) {\n    this.run(levels().ERROR, obj, (obj) => this.completeRequestPicker(this.getData(obj)));\n    return this;\n  }\n\n  trace(obj: any) {\n    this.run(levels().TRACE, obj, (obj) => this.completeRequestPicker(this.getData(obj)));\n    return this;\n  }\n\n  public flush() {\n    if (this.stack.length) {\n      this.stack.forEach(({level, data}: any) => {\n        this.logger[level](data);\n      });\n\n      this.stack = [];\n    }\n  }\n\n  public isLevelEnabled(otherLevel: string | LogLevel) {\n    return this.level.isLessThanOrEqualTo(otherLevel);\n  }\n\n  destroy() {\n    this.flush();\n\n    this.logger = undefined;\n    this.stack = undefined;\n  }\n\n  /**\n   * Return the duration between the time when LogIncomingRequest has handle the request and now.\n   * @returns {number}\n   */\n  protected getDuration(): number {\n    return new Date().getTime() - this.dateStart.getTime();\n  }\n\n  protected getData(obj: any) {\n    if (typeof obj === \"string\") {\n      obj = {message: obj};\n    }\n\n    return {...this.additionalProps, reqId: this.id, time: new Date(), duration: this.getDuration(), ...obj};\n  }\n\n  protected run(level: LogLevel, obj: any, mapper: (data: any) => any) {\n    if (!this.isLevelEnabled(level)) {\n      return;\n    }\n\n    if (!this.ignoreLog(obj)) {\n      this.stack.push({level: level.levelStr.toLowerCase(), data: mapper(obj)});\n    }\n\n    if (this.maxStackSize < this.stack.length) {\n      this.flush();\n    }\n  }\n}\n"]}