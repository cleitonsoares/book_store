import { ContextLogger } from "./ContextLogger.js";
import { LocalsContainer } from "./LocalsContainer.js";
export class DIContext extends Map {
    constructor({ id, injector, logger, ignoreLog, ...options }) {
        super();
        /**
         * Date when request have been handled by the server. @@RequestLogger@@ use this date to log request duration.
         */
        this.dateStart = new Date();
        /**
         * The request container used by the Ts.ED DI. It contain all services annotated with `@Scope(ProviderScope.REQUEST)`
         */
        this.container = new LocalsContainer();
        this.id = id;
        injector && (this.injector = injector);
        this.logger = new ContextLogger(logger, {
            ...options,
            dateStart: this.dateStart,
            id,
            ignoreLog
        });
    }
    get env() {
        return this.injector.settings.env;
    }
    async destroy() {
        await this.container.destroy();
        this.logger.destroy();
        // @ts-ignore
        delete this.container;
        // @ts-ignore
        delete this.logger;
        // @ts-ignore
        delete this.injector;
    }
    async emit(eventName, ...args) {
        var _a;
        return (_a = this.injector) === null || _a === void 0 ? void 0 : _a.emit(eventName, ...args);
    }
}
//# sourceMappingURL=DIContext.js.map