{"version":3,"file":"DIContext.js","sourceRoot":"","sources":["../../../src/domain/DIContext.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,aAAa,EAAuB,MAAM,iBAAiB,CAAC;AACpE,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAkBlD,MAAM,OAAO,SAAU,SAAQ,GAAa;IA4C1C,YAAY,EAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,EAAmB;QACzE,KAAK,EAAE,CAAC;QAlBV;;WAEG;QACM,cAAS,GAAS,IAAI,IAAI,EAAE,CAAC;QACtC;;WAEG;QACI,cAAS,GAAG,IAAI,eAAe,EAAO,CAAC;QAY5C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAEb,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC;QAEvC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE;YACtC,GAAG,OAAO;YACV,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,EAAE;YACF,SAAS;SACV,CAAC,CAAC;IACL,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtB,aAAa;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;QACtB,aAAa;QACb,OAAO,IAAI,CAAC,MAAM,CAAC;QACnB,aAAa;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,SAAiB,EAAE,GAAG,IAAW;;QAC1C,OAAO,MAAA,IAAI,CAAC,QAAQ,0CAAE,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC;CACF","sourcesContent":["import type {Env} from \"@tsed/core\";\nimport {InjectorService} from \"../services/InjectorService\";\nimport {ContextLogger, ContextLoggerOptions} from \"./ContextLogger\";\nimport {LocalsContainer} from \"./LocalsContainer\";\n\nexport interface ContextMethods extends Map<any, any> {\n  readonly id: string;\n  readonly logger: ContextLogger;\n  readonly injector: InjectorService;\n  readonly container: LocalsContainer;\n  readonly env: Env;\n\n  destroy(): any;\n}\n\nexport interface DIContextOptions extends Omit<ContextLoggerOptions, \"dateStart\"> {\n  id: string;\n  logger: any;\n  injector?: InjectorService;\n}\n\nexport class DIContext extends Map<any, any> implements ContextMethods {\n  [x: string]: any;\n  /**\n   * Request id generated by @@contextMiddleware@@.\n   *\n   * ::: tip\n   * By default Ts.ED generate uuid like that `uuidv4().replace(/-/gi, \"\"))`.\n   * Dash are removed to simplify tracking logs in Kibana\n   * :::\n   *\n   * ::: tip\n   * Request id can by customized by changing the server configuration.\n   *\n   * ```typescript\n   * @Configuration({\n   *   logger: {\n   *     reqIdBuilder: createUniqId // give your own id generator function\n   *   }\n   * })\n   * class Server {\n   *\n   * }\n   * ```\n   * :::\n   *\n   */\n  readonly id: string;\n  /**\n   * Date when request have been handled by the server. @@RequestLogger@@ use this date to log request duration.\n   */\n  readonly dateStart: Date = new Date();\n  /**\n   * The request container used by the Ts.ED DI. It contain all services annotated with `@Scope(ProviderScope.REQUEST)`\n   */\n  public container = new LocalsContainer<any>();\n  /**\n   * Logger attached to the context request.\n   */\n  public logger: ContextLogger;\n  /**\n   *\n   */\n  public injector: InjectorService;\n\n  constructor({id, injector, logger, ignoreLog, ...options}: DIContextOptions) {\n    super();\n    this.id = id;\n\n    injector && (this.injector = injector);\n\n    this.logger = new ContextLogger(logger, {\n      ...options,\n      dateStart: this.dateStart,\n      id,\n      ignoreLog\n    });\n  }\n\n  get env() {\n    return this.injector.settings.env;\n  }\n\n  async destroy() {\n    await this.container.destroy();\n    this.logger.destroy();\n    // @ts-ignore\n    delete this.container;\n    // @ts-ignore\n    delete this.logger;\n    // @ts-ignore\n    delete this.injector;\n  }\n\n  async emit(eventName: string, ...args: any[]) {\n    return this.injector?.emit(eventName, ...args);\n  }\n}\n\nexport type BaseContext = DIContext & TsED.Context;\n"]}