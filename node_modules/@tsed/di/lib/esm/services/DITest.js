import { Env, getValue } from "@tsed/core";
import { $log } from "@tsed/logger";
import { createContainer } from "../utils/createContainer.js";
import { LocalsContainer } from "../domain/LocalsContainer.js";
import { setLoggerLevel } from "../utils/setLoggerLevel.js";
import { InjectorService } from "./InjectorService.js";
import { DIContext } from "../domain/DIContext.js";
/**
 * Tool to run test with lightweight DI sandbox.
 */
export class DITest {
    static get injector() {
        if (DITest._injector) {
            return DITest._injector;
        }
        /* istanbul ignore next */
        throw new Error("PlatformTest.injector is not initialized. Use PlatformTest.create(): Promise before PlatformTest.invoke() or PlatformTest.injector.\n" +
            "Example:\n" +
            "before(async () => {\n" +
            "   await PlatformTest.create()\n" +
            "   await PlatformTest.invoke(MyService, [])\n" +
            "})");
    }
    static set injector(injector) {
        DITest._injector = injector;
    }
    static hasInjector() {
        return !!DITest._injector;
    }
    static async create(settings = {}) {
        DITest.injector = DITest.createInjector(settings);
        await this.createContainer(settings);
    }
    static async createContainer(settings = {}) {
        var _a;
        const container = createContainer();
        (_a = settings.imports) === null || _a === void 0 ? void 0 : _a.forEach(({ token, use }) => {
            container.addProvider(token, {
                useValue: use
            });
        });
        await DITest.injector.load(container);
    }
    /**
     * Create a new injector with the right default services
     */
    static createInjector(settings = {}) {
        const injector = new InjectorService();
        injector.logger = $log;
        // @ts-ignore
        injector.settings.set(DITest.configure(settings));
        setLoggerLevel(injector);
        return injector;
    }
    /**
     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.
     */
    static async reset() {
        if (DITest.hasInjector()) {
            await DITest.injector.destroy();
            DITest._injector = null;
        }
    }
    /**
     * Invoke a provider and return a fresh instance
     * @param target
     * @param providers
     */
    static invoke(target, providers = []) {
        const locals = new LocalsContainer();
        providers.forEach((p) => {
            locals.set(p.token, p.use);
        });
        locals.set(InjectorService, DITest.injector);
        const instance = DITest.injector.invoke(target, locals, { rebuild: true });
        if (instance && instance.$onInit) {
            // await instance.$onInit();
            const result = instance.$onInit();
            if (result instanceof Promise) {
                return result.then(() => instance);
            }
        }
        return instance;
    }
    /**
     * Return the instance from injector registry
     * @param target
     * @param options
     */
    static get(target, options = {}) {
        return DITest.injector.get(target, options);
    }
    static createDIContext() {
        return new DIContext({
            id: "id",
            injector: DITest.injector,
            logger: DITest.injector.logger
        });
    }
    static configure(settings = {}) {
        return {
            ...settings,
            env: getValue(settings, "env", Env.TEST),
            logger: {
                ...getValue(settings, "logger", {}),
                level: getValue(settings, "logger.level", "off")
            }
        };
    }
}
DITest._injector = null;
//# sourceMappingURL=DITest.js.map