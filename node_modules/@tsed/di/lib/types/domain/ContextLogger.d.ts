import { LogLevel } from "@tsed/logger";
export interface ContextLoggerOptions extends Record<string, any> {
    id: string;
    url?: string;
    dateStart?: Date;
    level?: "debug" | "info" | "warn" | "error" | "off" | "all";
    maxStackSize?: number;
    minimalRequestPicker?: (o: any) => any;
    completeRequestPicker?: (o: any) => any;
    ignoreLog?: (data: any) => boolean;
    additionalProps?: Record<any, any>;
}
export declare class ContextLogger {
    private logger;
    id: string;
    url: string;
    minimalRequestPicker: Function;
    completeRequestPicker: Function;
    maxStackSize: number;
    private readonly additionalProps;
    private readonly dateStart;
    private readonly ignoreLog;
    private stack;
    private level;
    constructor(logger: any, { id, url, dateStart, ignoreUrlPatterns, minimalRequestPicker, completeRequestPicker, level, maxStackSize, ignoreLog, additionalProps }: ContextLoggerOptions);
    info(obj: any): this;
    debug(obj: any, withRequest?: boolean): this;
    warn(obj: any): this;
    error(obj: any): this;
    trace(obj: any): this;
    flush(): void;
    isLevelEnabled(otherLevel: string | LogLevel): boolean;
    destroy(): void;
    /**
     * Return the duration between the time when LogIncomingRequest has handle the request and now.
     * @returns {number}
     */
    protected getDuration(): number;
    protected getData(obj: any): any;
    protected run(level: LogLevel, obj: any, mapper: (data: any) => any): void;
}
