{"version":3,"file":"index.js","sources":["../src/appenders/registries/AppendersRegistry.ts","../src/logger/class/LoggerAppenders.ts","../src/logger/utils/tableUtils.ts","../src/core/LogEvent.ts","../src/core/LogLevel.ts","../src/core/LogContext.ts","../src/logger/class/Logger.ts","../src/appenders/decorators/appender.ts","../src/layouts/registries/LayoutsRegistry.ts","../src/layouts/class/Layouts.ts","../src/appenders/class/BaseAppender.ts","../src/appenders/components/ConsoleAppender.ts","../src/appenders/components/FileAppender.ts","../src/appenders/components/StderrAppender.ts","../src/appenders/components/StdoutAppender.ts","../src/layouts/constants/logColors.ts","../src/layouts/class/BaseLayout.ts","../src/layouts/decorators/layout.ts","../src/layouts/utils/colorizeUtils.ts","../src/layouts/utils/timestampLevelAndCategory.ts","../src/layouts/components/BasicLayout.ts","../src/layouts/components/ColoredLayout.ts","../src/layouts/components/DummyLayout.ts","../src/layouts/components/MessagePassThroughLayout.ts","../src/layouts/utils/StringUtils.ts","../src/layouts/class/LayoutReplacer.ts","../src/layouts/components/PatternLayout.ts","../src/layouts/components/JsonLayout.ts","../src/index.ts"],"sourcesContent":["/**\n * @module appenders\n */\n/** */\nexport interface IAppenderProvider {\n  provide: any;\n  instance?: any;\n}\n\nexport const AppendersRegistry: Map<string, IAppenderProvider> = new Map<string, IAppenderProvider>();\n","import {AppendersRegistry} from \"../../appenders/registries/AppendersRegistry\";\nimport {BaseAppender} from \"../../appenders/class/BaseAppender\";\nimport {LogLevel} from \"../../core/LogLevel\";\nimport {IAppenderConfiguration} from \"../../appenders/interfaces/AppenderConfiguration\";\n\nexport interface ILoggerAppender {\n  name: string;\n  instance: any;\n  config: IAppenderConfiguration;\n}\n\nexport class LoggerAppenders {\n  private _appenders: Map<string, ILoggerAppender> = new Map();\n  private _lvls: Map<string, any> = new Map<string, any>();\n\n  get size() {\n    return this._appenders.size;\n  }\n\n  /**\n   * The `has() method returns a boolean indicating whether an element with the specified configuration name exists or not.\n   * @param name Required. The key of the element to test for presence in the Map object.`\n   * @returns {boolean}\n   */\n  has(name: string): boolean {\n    return this._appenders.has(name);\n  }\n\n  /**\n   * The `get() method returns a specified element from a loggerAppenders.\n   * @param name Required. The configuration of the element to return from the Map object.\n   * @returns {ILoggerAppender}\n   */\n  get(name: string): ILoggerAppender {\n    return this._appenders.get(name)!;\n  }\n\n  /**\n   * The `set()` method adds or updates an element with a specified key and value to a loggerAppenders object.\n   * @param name Required. The key of the element to add to the loggerAppenders object.\n   * @param config Required. The config of the element to add to the loggerAppenders object.\n   * @returns {LoggerAppender}\n   */\n  set(name: string, config: IAppenderConfiguration): LoggerAppenders {\n    if (!AppendersRegistry.has(config.type)) {\n      const error = new Error(`Appender ${config.type} doesn't exists. Check your configuration:\\n${JSON.stringify(config)}\\n`);\n      error.name = \"UNKNOW_APPENDER\";\n      throw error;\n    }\n\n    const klass = AppendersRegistry.get(config.type)!.provide;\n    const instance: BaseAppender = new klass(config);\n\n    this._appenders.set(name, {name, instance, config});\n    this._lvls.clear();\n    return this;\n  }\n\n  /**\n   * Remove all configuration that match with the `name`.\n   * @param name Required. The key of the element to remove from the loggerAppenders object.\n   * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n   */\n  delete(name: string): boolean {\n    let existed = this._appenders.delete(name);\n    if (existed) {\n      this._lvls.clear();\n    }\n    return existed;\n  }\n\n  /**\n   * The `clear() method removes all elements from a loggerAppenders object.\n   */\n  clear(): void {\n    this._appenders.clear();\n    this._lvls.clear();\n  }\n\n  /**\n   * The `forEach()` method executes a provided function once per each key/value pair in the loggerAppenders object, in insertion order.\n   * @param callback Function to execute for each element.\n   * @param thisArg Value to use as this when executing callback.\n   */\n  forEach(callback: (value: ILoggerAppender, key: string, map: Map<string, ILoggerAppender>) => void, thisArg?: any): void {\n    this._appenders.forEach(callback, thisArg);\n  }\n\n  /**\n   *\n   * @returns {Array}\n   */\n  toArray() {\n    const array: any[] = [];\n    this._appenders.forEach(o => array.push(o));\n    return array;\n  }\n\n  /**\n   * Return all appenders that match with the given loggingLevel.\n   * @param loggingLevel\n   * @returns {[BaseAppender]}\n   */\n  byLogLevel(loggingLevel: LogLevel): BaseAppender[] {\n    const level = loggingLevel.toString();\n    if (this._lvls.has(level)) {\n      return this._lvls.get(level);\n    }\n\n    const list = this.toArray()\n      .filter(appender =>\n        appender.config.levels ? appender.config.levels.find((level: string) => level.toUpperCase() === loggingLevel.toString()) : true\n      )\n      .map(appender => appender.instance);\n\n    this._lvls.set(loggingLevel.toString(), list);\n\n    return list;\n  }\n}\n","export interface ITableSettings {\n  padding?: number;\n  header?: {\n    [key: string]: string;\n  };\n}\n\nexport function charRepeater(x: number, char = \" \") {\n  let res = \"\";\n  while (x--) res += char;\n  return res;\n}\n\n/**\n *\n * @returns {string}\n */\nexport function buildStartLine(fields: any, settings: ITableSettings) {\n  let line = \"┌\";\n  let list = Object.keys(fields);\n\n  list.forEach((key, index) => {\n    if (index !== 0 && index !== list.length) {\n      line += \"┬\";\n    }\n\n    line += charRepeater(fields[key] + 2 * settings.padding!, \"─\");\n  });\n\n  line += \"┐\";\n\n  return line;\n}\n\n/**\n *\n * @param fields\n * @param settings\n * @returns {string}\n */\nexport function buildEndLine(fields: any, settings: ITableSettings) {\n  let line = \"└\";\n  let list = Object.keys(fields);\n\n  list.forEach((key, index) => {\n    if (index !== 0 && index !== list.length) {\n      line += \"┴\";\n    }\n\n    line += charRepeater(fields[key] + 2 * settings.padding!, \"─\");\n  });\n\n  line += \"┘\";\n  return line;\n}\n\n/**\n *\n * @param fields\n * @param settings\n * @param char\n * @returns {string}\n */\nexport function buildLine(fields: any, settings: ITableSettings, char = \"─\") {\n  let line = \"\";\n\n  Object.keys(fields).forEach(key => {\n    line += \"│\";\n    line += charRepeater(fields[key] + 2 * settings.padding!, char);\n  });\n\n  line += \"│\";\n  return line;\n}\n\n/**\n *\n */\nexport function buildLineData(scope: any, fields: any, settings: ITableSettings) {\n  let line = \"\";\n\n  Object.keys(fields).forEach(key => {\n    line += \"│ \";\n    line += scope[key];\n    line += charRepeater(fields[key] + 2 * (settings.padding! - 1) - scope[key].length, \" \");\n    line += \" \";\n  });\n\n  line += \"│\";\n  return line;\n}\n\n/**\n *\n * @param list\n * @param settings\n * @returns {string}\n */\nexport function drawTable(list: any[], settings: ITableSettings = {}): string {\n  settings.padding = settings.padding || 1;\n\n  if (settings.header === undefined) {\n    settings.header = {};\n\n    Object.keys(list[0]).forEach(key => (settings.header![key] = key));\n  }\n\n  const fields: any = {};\n\n  // Calculate width for each column\n\n  Object.keys(settings.header).forEach(key => (fields[key] = settings.header![key].length));\n\n  list.forEach(route => {\n    Object.keys(fields).forEach(key => (fields[key] = Math.max((\"\" + route[key]).length, fields[key])));\n  });\n\n  let output = \"\";\n\n  output += buildStartLine(fields, settings) + \"\\n\";\n  output += buildLineData(settings.header, fields, settings) + \"\\n\";\n\n  list.forEach(scope => {\n    output += buildLine(fields, settings) + \"\\n\";\n    output += buildLineData(scope, fields, settings) + \"\\n\";\n  });\n\n  output += buildEndLine(fields, settings);\n\n  return output;\n}\n","import {LogLevel} from \"./LogLevel\";\nimport {LogContext} from \"./LogContext\";\n\nexport class LogEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {String} _categoryName name of category\n   * @param {LogLevel} _level level of message\n   * @param {Array} _data objects to log\n   * @param _context\n   */\n  constructor(private _categoryName: string, private _level: LogLevel, private _data: any[], private _context: LogContext) {\n  }\n\n  private _startTime = new Date();\n\n  get startTime(): Date {\n    return this.data && this.data[0] && this.data[0].time ? this.data[0].time : this._startTime;\n  }\n\n  public get categoryName(): string {\n    return this._categoryName;\n  }\n\n  public get level(): LogLevel {\n    return this._level;\n  }\n\n  public get formatedLevel(): string {\n    return (this.level.toString() + \"     \").slice(0, 5);\n  }\n\n  public get data(): any[] {\n    return this._data;\n  }\n\n  public set data(data: any[]) {\n    this._data = data;\n  }\n\n  public get context(): LogContext {\n    return this._context;\n  }\n\n  public get cluster(): any {\n    return {};\n  }\n\n  public get pid() {\n    return this.context.get(\"pid\");\n  }\n}\n","/**\n * @module core\n */\n/** */\n\nexport class LogLevel {\n  constructor(readonly level: number, readonly levelStr: string) {\n    this.level = level;\n    this.levelStr = levelStr;\n  }\n\n  static getLevel(sArg: any | string | LogLevel, defaultLevel?: string | LogLevel): LogLevel {\n    if (sArg instanceof LogLevel) {\n      return sArg;\n    }\n\n    if (typeof sArg === \"string\") {\n      const index: any = sArg.toUpperCase();\n      return (DEFAULT_LOG_LEVELS as any)[index] || defaultLevel;\n    }\n\n    return this.getLevel(sArg.toString());\n  }\n\n  toString() {\n    return this.levelStr;\n  }\n\n  isLessThanOrEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level <= (otherLevel as LogLevel).level;\n  }\n\n  isGreaterThanOrEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level >= (otherLevel as LogLevel).level;\n  }\n\n  isEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level === (otherLevel as LogLevel).level;\n  }\n}\n\nconst DEFAULT_LOG_LEVELS = {\n  ALL: new LogLevel(Number.MIN_VALUE, \"ALL\"),\n  TRACE: new LogLevel(5000, \"TRACE\"),\n  DEBUG: new LogLevel(10000, \"DEBUG\"),\n  INFO: new LogLevel(20000, \"INFO\"),\n  WARN: new LogLevel(30000, \"WARN\"),\n  ERROR: new LogLevel(40000, \"ERROR\"),\n  FATAL: new LogLevel(50000, \"FATAL\"),\n  MARK: new LogLevel(9007199254740992, \"MARK\"), // 2^53\n  OFF: new LogLevel(Number.MAX_VALUE, \"OFF\")\n};\n\nexport function levels() {\n  return DEFAULT_LOG_LEVELS;\n}\n","export class LogContext extends Map<string, any> {\n  toJSON() {\n    return [...this.entries()].reduce((context, [key, value]) => {\n      return {\n        ...context,\n        [key]: value\n      };\n    }, {});\n  }\n}","import {LoggerAppenders} from \"./LoggerAppenders\";\nimport {drawTable, ITableSettings} from \"../utils/tableUtils\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {levels, LogLevel} from \"../../core/LogLevel\";\nimport {BaseAppender} from \"../../appenders/class/BaseAppender\";\nimport {LogContext} from \"../../core/LogContext\";\n\nexport class Logger {\n  /**\n   *\n   */\n  constructor(private _name: string = \"default\") {\n    this.level = \"all\";\n  }\n\n  private _appenders: LoggerAppenders = new LoggerAppenders();\n\n  get appenders(): LoggerAppenders {\n    return this._appenders;\n  }\n\n  private _level: LogLevel;\n\n  get level(): string {\n    return this._level.toString();\n  }\n\n  set level(level: string) {\n    this._level = LogLevel.getLevel(level, \"debug\");\n  }\n\n  /**\n   *\n   */\n  private _context: LogContext = new LogContext();\n\n  get context(): LogContext {\n    return this._context;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n  }\n\n  /**\n   * Create stack trace  the lines of least Logger.\n   * @returns {string}\n   */\n  public static createStack(): string {\n    const stack: string = new Error().stack!.replace(\"Error\\n\", \"\");\n\n    return stack.split(\"\\n\")\n      .filter((line, index) => index >= 2)\n      .join(\"\\n\");\n  }\n\n  public isLevelEnabled(otherLevel: string | LogLevel) {\n    return this._level.isLessThanOrEqualTo(otherLevel);\n  }\n\n  /**\n   * Prints to stdout with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf() (the arguments are all passed to util.format()).\n   * @param data\n   * @returns {any}\n   */\n  public debug(...data: any[]): Logger {\n    return this.write(levels().DEBUG, data);\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {any}\n   */\n  public info(...data: any[]): Logger {\n    return this.write(levels().INFO, data);\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {any}\n   */\n  public warn(...data: any[]): Logger {\n    return this.write(levels().WARN, data);\n  }\n\n  /**\n   * Prints to stderr with newline. Multiple arguments can be passed, with the first used as the primary\n   * message and all additional used as substitution values similar to printf() (the arguments are all\n   * passed to util.format()).\n   * @param data\n   * @param args\n   * @returns {any}\n   */\n  public error(...data: any[]): Logger {\n    return this.write(levels().ERROR, data);\n  }\n\n  public fatal(...data: any[]): Logger {\n    return this.write(levels().FATAL, data);\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {Logger}\n   */\n  public trace(...data: any[]): Logger {\n    const stack = \"\\n\" + Logger.createStack() + \"\\n\";\n    data.push(stack);\n    return this.write(levels().TRACE, data);\n  }\n\n  /**\n   *\n   */\n  public start(): Logger {\n    this.level = \"ALL\";\n    return this;\n  }\n\n  /**\n   *\n   */\n  public stop(): Logger {\n    this.level = \"OFF\";\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Promise<TAll[]>}\n   */\n  public shutdown() {\n    this.stop();\n\n    const promises = this.appenders\n      .toArray()\n      .filter(appender => !!appender.instance.shutdown)\n      .map(appender => appender.instance.shutdown());\n\n    return Promise.all(promises);\n  }\n\n  /**\n   *\n   * @param list\n   * @param settings\n   */\n  public drawTable(list: any[], settings: ITableSettings = {}): string {\n    return drawTable(list, settings);\n  }\n\n  /**\n   *\n   * @param list\n   * @param settings\n   * @returns {Logger}\n   */\n  public printTable(list: any[], settings: ITableSettings = {}) {\n    this.info(`\\n${this.drawTable(list, settings)}`);\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Logger}\n   */\n  private write(logLevel: LogLevel, data: any[]): Logger {\n    if (!this.isLevelEnabled(logLevel)) return this;\n\n    const logEvent = new LogEvent(this._name, logLevel, data, this._context);\n\n    this.appenders.byLogLevel(logLevel).forEach((appender: BaseAppender) => {\n      appender.write(logEvent);\n    });\n\n    return this;\n  }\n}\n","/**\n * @module appenders\n */\n/** */\nimport {AppendersRegistry} from \"../registries/AppendersRegistry\";\nimport {IAppenderOptions} from \"../class/BaseAppender\";\n\nexport function Appender(options: IAppenderOptions) {\n  return (target: any) => {\n    target.prototype.appenderOptions = options;\n    target.$name = options.name;\n    AppendersRegistry.set(options.name, {provide: target});\n  };\n}\n","export interface ILayoutProvider {\n  provide: any;\n  instance?: any;\n}\n\nexport const LayoutsRegistry: Map<string, ILayoutProvider> = new Map<string, ILayoutProvider>();\n","import {LayoutsRegistry} from \"../registries/LayoutsRegistry\";\nimport {IBasicLayoutConfiguration} from \"../interfaces/BasicLayoutConfiguration\";\nimport {BaseLayout} from \"./BaseLayout\";\n\nexport class Layouts {\n  static get(name: string | any, config: IBasicLayoutConfiguration): BaseLayout {\n    if (typeof name !== \"string\") {\n      name = name.$name;\n    }\n\n    if (!LayoutsRegistry.has(name)) {\n      name = \"colored\";\n      console.warn(name + \" layout doesn't exists\");\n    }\n\n    const layoutKlass: any = LayoutsRegistry.get(name);\n\n    return new layoutKlass.provide(config);\n  }\n}\n","/**\n * @module appenders\n */\n/** */\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layouts} from \"../../layouts/class/Layouts\";\nimport {IAppenderConfiguration, PartialAppenderConfiguration} from \"../interfaces/AppenderConfiguration\";\n\nexport interface IAppenderOptions {\n  name: string;\n  defaultLayout?: string;\n}\n\nexport interface IBaseAppender {\n  write(loggingEvent: LogEvent): any;\n\n  build?(): any;\n\n  reopen?(): any;\n\n  shutdown?(): Promise<any> | any | void;\n}\n\n/**\n * ## BaseAppender\n *\n * `@tsed/logger` can load appenders from outside the core appenders. The type config value is used as a require path if no matching appender can be found. For example, the following configuration will create an appender with decorators:\n *\n * ```typescript\n * // consoleAppender.ts\n * import {Appender, BaseAppender, LogEvent} from \"@tsed/logger\";\n * const consoleLog = console.log.bind(console);\n *\n * @ Appender({name: \"console2\"})\n * export class ConsoleAppender extends BaseAppender {\n *   write(loggingEvent: LogEvent) {\n *       consoleLog(this.layout(loggingEvent, this.config.timezoneOffset));\n *   }\n * }\n * ```\n *\n * This appender can be use like this:\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n * import \"./consoleAppender.ts\"\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .set(\"console-log\", {\n *       type: \"console2\", level: [\"debug\", \"info\", \"trace\"]\n *   });\n * ```\n *\n *\n */\nexport abstract class BaseAppender implements IBaseAppender {\n  private _layout: any;\n  private appenderOptions: IAppenderOptions = {name: \"\"};\n\n  [key: string]: any;\n\n  constructor(private _config: IAppenderConfiguration) {\n    this.configure(_config);\n\n    if (this[\"build\"]) {\n      this[\"build\"]();\n    }\n  }\n\n  get config(): IAppenderConfiguration {\n    return this._config;\n  }\n\n  configure(config: PartialAppenderConfiguration) {\n    Object.assign(this._config, config);\n\n    this._layout = Layouts.get(this.appenderOptions.defaultLayout || \"colored\", this._config);\n\n    if (this._config.layout) {\n      this._layout = Layouts.get(this._config.layout.type, this._config.layout);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param args\n   */\n  layout(...args: any[]): string {\n    return this._layout.transform(...args);\n  }\n\n  abstract write(loggingEvent: LogEvent): any;\n}\n","/**\n * @module appenders\n */\n/** */\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Appender} from \"../decorators/appender\";\nimport {BaseAppender} from \"../class/BaseAppender\";\n\n/**\n * ## Console Appender\n *\n * This appender uses node’s console object to write log events. It can also be used in the browser, if you’re using browserify or something similar. Be aware that writing a high volume of output to the console can make your application use a lot of memory. If you experience this problem, try switching to the stdout appender.\n *\n * ## Configuration\n *\n * * type - console\n * * layout - object (optional, defaults to colouredLayout) - see layouts\n *\n * Note that all log events are output using console.log regardless of the event’s level (so ERROR events will not be logged using console.error)\n *\n * ## Example\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"console\", {\n *     type: \"console\",\n *     levels: [\"debug\", \"info\", \"trace\"]\n * });\n * ```\n *\n * @private\n */\n@Appender({name: \"console\"})\nexport class ConsoleAppender extends BaseAppender {\n  private log = console.log.bind(console);\n\n  write(loggingEvent: LogEvent) {\n    this.log(this.layout(loggingEvent, this.config.timezoneOffset));\n  }\n}\n","/**\n * @module appenders\n */\n/** */\n\nimport {Appender} from \"../decorators/appender\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport * as Path from \"path\";\nimport * as Os from \"os\";\nimport {BaseAppender} from \"../class/BaseAppender\";\n\nconst streams = require(\"streamroller\");\nconst eol = Os.EOL || \"\\n\";\n\n/**\n * ## File Appender\n *\n * The file appender writes log events to a file. It supports an optional maximum file size, and will keep a configurable number of backups. When using the file appender, you should also call `logger.shutdown()` when your application terminates, to ensure that any remaining asynchronous writes have finished. Although the file appender uses the streamroller library, this is included as a dependency of ts-log-debug so you do not need to include it yourself.\n *\n * ## Configuration\n *\n * * type - \"file\"\n * * filename - string - the path of the file where you want your logs written.\n * * maxLogSize - integer (optional) - the maximum size (in bytes) for the log file. If not specified, then no log rolling will happen.\n * * backups - integer (optional, default value = 5) - the number of old log files to keep during log rolling.\n * * layout - (optional, defaults to basic layout) - see layouts\n *\n * Any other configuration parameters will be passed to the underlying streamroller implementation (see also node.js core file streams):\n *\n * * encoding - string (default “utf-8”)\n * * mode - integer (default 0644)\n * * flags - string (default ‘a’)\n * * compress - boolean (default false) - compress the backup files during rolling (backup files will have .gz extension)\n *\n * ## Example\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log-file\", {\n *     type: \"file\",\n *     filename: \"all-the-logs.log\"\n * });\n * logger.debug('I will be logged in all-the-logs.log');\n * ```\n * > This example will result in a single log file (all-the-logs.log) containing the log messages.\n *\n * ## Example with log rolling (and compressed backups)\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log-file2\", {\n *     type: \"file\",\n *     filename: \"all-the-logs.log\",\n *     maxLogSize: 10485760,\n *     backups: 3,\n *     compress: true\n * });\n * logger.debug('I will be logged in all-the-logs.log');\n * ```\n *\n * :::\n * This will result in one current log file (all-the-logs.log). When that reaches 10Mb in size, it will be renamed and compressed to all-the-logs.log.1.gz and a new file opened called all-the-logs.log. When all-the-logs.log reaches 10Mb again, then all-the-logs.log.1.gz will be renamed to all-the-logs.log.2.gz, and so on.\n * :::\n *\n * ## Example with date rolling\n *\n * ```typescript\n * import { Logger } from \"@tsed/logger\";\n * export const logger = new Logger(\"Log Example\");\n *\n * logger.appenders\n * .set('file', {\n *   type: 'file',\n *   filename: `${__dirname}/../logs/myfile.log`,\n *   pattern: '.yyyy-MM-dd'\n * });\n * ```\n *\n */\n@Appender({name: \"file\", defaultLayout: \"basic\"})\nexport class FileAppender extends BaseAppender {\n  private writer: any;\n  private listener: any;\n\n  /**\n   *\n   */\n  public reopen() {\n    return this.shutdown().then(() => {\n      this.build();\n    });\n  }\n\n  /**\n   *\n   */\n  public shutdown(): Promise<any> {\n    process.removeListener(\"SIGHUP\", this.listener);\n\n    return new Promise((resolve, reject) => {\n      this.writer.write(\"\", \"utf-8\", () => {\n        this.writer.end(resolve);\n      });\n    });\n  }\n\n  /**\n   *\n   * @param loggingEvent\n   */\n  public write(loggingEvent: LogEvent) {\n    this.writer.write(this.layout(loggingEvent, this.config.timezoneOffset) + eol, \"utf8\");\n  }\n\n  private build() {\n    let {filename: file, maxLogSize: logSize, backups: numBackups, pattern} = this.config;\n\n    file = Path.normalize(file!);\n    numBackups = numBackups === undefined ? 5 : numBackups;\n    // there has to be at least one backup if logSize has been specified\n    numBackups = numBackups === 0 ? 1 : numBackups;\n\n    this.writer = this.openTheStream(file, logSize, numBackups, pattern, this.config);\n    // On SIGHUP, close and reopen all files. This allows this appender to work with\n    // logrotate. Note that if you are using logrotate, you should not set\n    // `logSize`.\n    this.listener = () => this.reopen();\n\n    process.on(\"SIGHUP\", this.listener);\n  }\n\n  /**\n   *\n   * @param file\n   * @param fileSize\n   * @param numFiles\n   * @param options\n   * @returns {streams.RollingFileStream}\n   */\n  private openTheStream(file: string, fileSize: number | undefined, numFiles: number, pattern: string | undefined, options: any) {\n    let stream = null;\n    if (pattern) {\n      stream = new streams.DateRollingFileStream(file, pattern, options);\n    } else {\n      stream = new streams.RollingFileStream(file, fileSize, numFiles, options);\n    }\n    stream.on(\"error\", (err: any) => {\n      console.error(\"FileAppender - Writing to file %s, error happened \", file, err);\n    });\n    return stream;\n  }\n}\n","/**\n * @module appenders\n */\n/** */\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Appender} from \"../decorators/appender\";\nimport {BaseAppender} from \"../class/BaseAppender\";\n\n/**\n * ## Standard Error Appender\n *\n * This appender writes all log events to the standard error stream.\n *\n * ## Configuration\n *\n * * type - stderr\n * * layout - object (optional, defaults to colouredLayout) - see layouts\n *\n * ## Example\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log-error\", {\n *     type: \"stderr\",\n *     levels: [\"error\", \"warn\", \"fatal\"]\n * });\n * ```\n *\n * @private\n */\n@Appender({name: \"stderr\"})\nexport class StderrAppender extends BaseAppender {\n  private log = process.stderr.write.bind(process.stderr);\n\n  write(loggingEvent: LogEvent) {\n    this.log(`${this.layout(loggingEvent, this.config.timezoneOffset)}\\n`);\n  }\n}\n","/**\n * @module appenders\n */\n/** */\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Appender} from \"../decorators/appender\";\nimport {BaseAppender} from \"../class/BaseAppender\";\n\n/**\n * ## Standard Output Appender\n *\n * This appender writes all log events to the standard output stream.\n *\n * ## Configuration\n *\n * * type - stderr\n * * layout - object (optional, defaults to colouredLayout) - see layouts\n *\n * ## Example\n *\n * ```typescript\n * import {Logger} from \"@tsed/logger\";\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders.set(\"log\", {\n *     type: \"stdout\",\n *     levels: [\"info\", \"trace\", \"debug\"]\n * });\n * ```\n *\n * @private\n */\n@Appender({name: \"stdout\"})\nexport class StdoutAppender extends BaseAppender {\n  private log = process.stdout.write.bind(process.stdout);\n\n  write(loggingEvent: LogEvent) {\n    this.log(`${this.layout(loggingEvent, this.config.timezoneOffset)}\\n`);\n  }\n}\n","export enum LOG_COLORS {\n  ALL = \"grey\",\n  INFO = \"green\",\n  DEBUG = \"cyan\",\n  WARN = \"yellow\",\n  TRACE = \"blue\",\n  ERROR = \"red\",\n  FATAL = \"magenta\",\n  OFF = \"grey\"\n}\n","import {LogEvent} from \"../../core/LogEvent\";\nimport {IBasicLayoutConfiguration} from \"../interfaces/BasicLayoutConfiguration\";\n\nexport abstract class BaseLayout {\n  constructor(protected config: IBasicLayoutConfiguration) {}\n\n  abstract transform(loggingEvent: LogEvent, timezoneOffset?: number): string;\n}\n","import {LayoutsRegistry} from \"../registries/LayoutsRegistry\";\n\nexport function Layout(options: {name: string}) {\n  return (target: any) => {\n    target.$name = options.name;\n    LayoutsRegistry.set(options.name, {provide: target});\n  };\n}\n","const styles: any = {\n  // styles\n  bold: [1, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  // grayscale\n  white: [37, 39],\n  grey: [90, 39],\n  black: [90, 39],\n  // colors\n  blue: [34, 39],\n  cyan: [36, 39],\n  green: [32, 39],\n  magenta: [35, 39],\n  red: [31, 39],\n  yellow: [33, 39]\n};\n\nexport function colorizeStart(style: any) {\n  return style ? `\\x1B[${styles[style][0]}m` : \"\";\n}\n\nexport function colorizeEnd(style: any) {\n  return style ? `\\x1B[${styles[style][1]}m` : \"\";\n}\n\nexport function colorize(str: string, style: any) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nexport function removeColors(str: string) {\n  return str.replace(/\\[\\d+m|\\\\u\\d+b/gi, \"\");\n}\n","import * as Util from \"util\";\nimport {colorize} from \"./colorizeUtils\";\nimport {LogEvent} from \"../../core/LogEvent\";\n\nconst dateFormat = require(\"date-format\");\n\nexport function timestampLevelAndCategory(loggingEvent: LogEvent, colour: any, timezoneOffset: number | undefined) {\n  return colorize(\n    Util.format(\n      \"[%s] [%s] [%s] - \",\n      dateFormat.asString(loggingEvent.startTime, timezoneOffset),\n      loggingEvent.formatedLevel,\n      loggingEvent.categoryName\n    ),\n    colour\n  );\n}\n","import * as Util from \"util\";\nimport {timestampLevelAndCategory} from \"../utils/timestampLevelAndCategory\";\nimport {BaseLayout} from \"../class/BaseLayout\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layout} from \"../decorators/layout\";\n\n@Layout({name: \"basic\"})\nexport class BasicLayout extends BaseLayout {\n  /**\n   * BasicLayout is a simple layouts for storing the logs. The logs are stored\n   * in following format:\n   * <pre>\n   * [startTime] [logLevel] categoryName - message\\n\n   * </pre>\n   *\n   * @author Stephan Strittmatter\n   */\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    return (\n      timestampLevelAndCategory(loggingEvent, undefined, timezoneOffset) + (Util.format as any)(...[].concat(loggingEvent.data as any))\n    );\n  }\n}\n","import * as Util from \"util\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {timestampLevelAndCategory} from \"../utils/timestampLevelAndCategory\";\nimport {LOG_COLORS} from \"../constants/logColors\";\nimport {Layout} from \"../decorators/layout\";\nimport {BaseLayout} from \"../class/BaseLayout\";\n\n@Layout({name: \"colored\"})\nexport class ColoredLayout extends BaseLayout {\n  /**\n   * colouredLayout - taken from masylum's fork.\n   * same as basicLayout, but with colours.\n   */\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    const index: any = loggingEvent.level.toString();\n    const color = LOG_COLORS[index as keyof typeof LOG_COLORS];\n    return timestampLevelAndCategory(loggingEvent, color, timezoneOffset) + (Util.format as any)(...[].concat(loggingEvent.data as any));\n  }\n}\n","import {BaseLayout} from \"../class/BaseLayout\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layout} from \"../decorators/layout\";\n\n@Layout({name: \"dummy\"})\nexport class DummyLayout extends BaseLayout {\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    return loggingEvent.data[0];\n  }\n}\n","import {BaseLayout} from \"../class/BaseLayout\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layout} from \"../decorators/layout\";\nimport * as Util from \"util\";\n\n@Layout({name: \"messagePassThrough\"})\nexport class MessagePassThroughLayout extends BaseLayout {\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    return (Util.format as any)(...[].concat(loggingEvent.data as any));\n  }\n}\n","export function truncate(truncation: string, toTruncate: string) {\n  let len;\n  if (truncation) {\n    len = parseInt(truncation.substr(1), 10);\n    return toTruncate.substring(0, len);\n  }\n\n  return toTruncate;\n}\n\nexport function pad(padding: string, toPad: string) {\n  let len;\n  if (padding) {\n    if (padding.charAt(0) === \"-\") {\n      len = parseInt(padding.substr(1), 10);\n      // Right pad with spaces\n      while (toPad.length < len) {\n        toPad += \" \";\n      }\n    } else {\n      len = parseInt(padding, 10);\n      // Left pad with spaces\n      while (toPad.length < len) {\n        toPad = ` ${toPad}`;\n      }\n    }\n  }\n  return toPad;\n}\n\nexport function truncateAndPad(toTruncAndPad: string, truncation: string, padding: string) {\n  let replacement = toTruncAndPad;\n  replacement = truncate(truncation, replacement);\n  replacement = pad(padding, replacement);\n  return replacement;\n}\n","import {LogEvent} from \"../../core/LogEvent\";\nimport * as Os from \"os\";\nimport {LOG_COLORS} from \"../constants/logColors\";\nimport {colorizeEnd, colorizeStart} from \"../utils/colorizeUtils\";\nimport {IReplacers} from \"../interfaces/Replacers\";\nimport {TokensHandlers} from \"../interfaces/BasicLayoutConfiguration\";\nimport * as Util from \"util\";\n\n/**\n *\n */\nconst dateFormat = require(\"date-format\");\nconst eol = Os.EOL || \"\\n\";\n\nexport class LayoutReplacer {\n  constructor(private tokens: TokensHandlers, private timezoneOffset: number) {}\n\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public categoryName = (loggingEvent: LogEvent, specifier: string): string => {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public formatAsDate = (loggingEvent: LogEvent, specifier: string): string => {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format === \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format === \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n      } else if (format === \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format === \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public hostname = (): string => {\n    return Os.hostname().toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public formatMessage = (loggingEvent: LogEvent): string => {\n    return (Util.format as any)(...loggingEvent.data);\n  };\n\n  public formatJson = (loggingEvent: LogEvent): string => {\n    return JSON.stringify(loggingEvent.data);\n  };\n  /**\n   *\n   * @returns {string|string}\n   */\n  public endOfLine = () => {\n    return eol;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public logLevel = (loggingEvent: LogEvent): string => {\n    return loggingEvent.level.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public startTime = (loggingEvent: LogEvent): string => {\n    return dateFormat.asString(\"hh:mm:ss\", loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public startColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeStart(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public endColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeEnd(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public percent = () => {\n    return \"%\";\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public pid = (loggingEvent?: LogEvent): string => {\n    return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public clusterInfo = (loggingEvent: LogEvent, specifier: string) => {\n    if (loggingEvent.cluster && specifier) {\n      return specifier\n        .replace(\"%m\", loggingEvent.cluster.master)\n        .replace(\"%w\", loggingEvent.cluster.worker)\n        .replace(\"%i\", loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return `${loggingEvent.cluster.worker}@${loggingEvent.cluster.master}`;\n    }\n\n    return this.pid();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public userDefined = (loggingEvent: LogEvent, specifier: string) => {\n    if (typeof this.tokens[specifier] !== \"undefined\") {\n      return typeof this.tokens[specifier] === \"function\" ? this.tokens[specifier](loggingEvent) : this.tokens[specifier];\n    }\n\n    return null;\n  };\n\n  build(): IReplacers {\n    return {\n      c: this.categoryName,\n      d: this.formatAsDate,\n      h: this.hostname,\n      m: this.formatMessage,\n      j: this.formatJson,\n      n: this.endOfLine,\n      p: this.logLevel,\n      r: this.startTime,\n      \"[\": this.startColour,\n      \"]\": this.endColour,\n      y: this.clusterInfo,\n      z: this.pid,\n      \"%\": this.percent,\n      x: this.userDefined\n    };\n  }\n}\n","import {truncateAndPad} from \"../utils/StringUtils\";\nimport {BaseLayout} from \"../class/BaseLayout\";\nimport {IReplacers} from \"../interfaces/Replacers\";\nimport {LayoutReplacer} from \"../class/LayoutReplacer\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {IBasicLayoutConfiguration, TokensHandlers} from \"../interfaces/BasicLayoutConfiguration\";\nimport {Layout} from \"../decorators/layout\";\n\nconst regex = /%(-?[0-9]+)?(\\.?[0-9]+)?([[\\]cdhmnpjrzxy%])(\\{([^}]+)\\})?|([^%]+)/;\nconst TTCC_CONVERSION_PATTERN = \"%r %p %c - %m%n\";\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %j log data as JSON\n *  - %d date in constious formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %x{[tokenname]} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { 'pid' : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layouts function.\n * @return {Function}\n * @param pattern\n * @param tokens\n * @param timezoneOffset\n *\n * @authors ['Stephan Strittmatter', 'Jan Schmidle']\n */\n@Layout({name: \"pattern\"})\nexport class PatternLayout extends BaseLayout {\n  readonly #replacers: IReplacers;\n  readonly #tokens: TokensHandlers;\n  readonly #pattern: string;\n\n  constructor(config: IBasicLayoutConfiguration) {\n    super(config);\n\n    this.#pattern = (config && config.pattern) || TTCC_CONVERSION_PATTERN;\n    this.#tokens = config && config.tokens!;\n    this.#replacers = new LayoutReplacer(this.#tokens, this.config.timezoneOffset).build();\n  }\n\n  /**\n   *\n   * @param loggingEvent\n   * @param timezoneOffset\n   * @returns {string}\n   */\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    let formattedString = \"\";\n    let result;\n    let searchString = this.#pattern;\n\n    /* eslint no-cond-assign:0 */\n    while ((result = regex.exec(searchString)) !== null) {\n      // const matchedString = result[0];\n      const padding = result[1];\n      const truncation = result[2];\n      const conversionCharacter = result[3];\n      const specifier = result[5];\n      const text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += text.toString();\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        const replacement = this.replaceToken(conversionCharacter, loggingEvent, specifier);\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n      searchString = searchString.substr(result.index + result[0].length);\n    }\n    return formattedString;\n  }\n\n  private replaceToken = (conversionCharacter: string, loggingEvent: any, specifier: any) => {\n    return this.#replacers[conversionCharacter](loggingEvent, specifier);\n  };\n}\n","import * as Util from \"util\";\nimport {BaseLayout} from \"../class/BaseLayout\";\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layout} from \"../decorators/layout\";\nimport {removeColors} from \"../utils/colorizeUtils\";\n\n@Layout({name: \"json\"})\nexport class JsonLayout extends BaseLayout {\n  transform(loggingEvent: LogEvent, timezoneOffset?: number): string {\n    const log: any = {\n      ...loggingEvent.context.toJSON(),\n      startTime: loggingEvent.startTime,\n      categoryName: loggingEvent.categoryName,\n      level: loggingEvent.level.toString()\n    };\n\n    log.data = loggingEvent.data.reduce((data, current) => {\n      if (typeof current === \"object\") {\n        Object.assign(log, current);\n\n        if (current.data) {\n          return [].concat(data, current.data);\n        }\n\n        return data;\n      }\n\n      return [...data, removeColors(Util.format(current))];\n    }, []);\n\n    return JSON.stringify(log) + (this.config[\"separator\"] || \"\");\n  }\n}\n","import {Logger} from \"./logger/class/Logger\";\n\nexport * from \"./core\";\nexport * from \"./appenders\";\nexport * from \"./layouts\";\nexport * from \"./logger\";\n\nlet $log: Logger = new Logger(\"default\");\n\n$log.appenders\n  .set(\"stdout\", {type: \"stdout\", levels: [\"info\", \"debug\"]})\n  .set(\"stderr\", {type: \"stderr\", levels: [\"trace\", \"fatal\", \"error\", \"warn\"]});\n\nexport {$log};\n"],"names":["AppendersRegistry","Map","LoggerAppenders","constructor","size","_appenders","has","name","get","set","config","type","error","Error","JSON","stringify","klass","provide","instance","_lvls","clear","delete","existed","forEach","callback","thisArg","toArray","array","o","push","byLogLevel","loggingLevel","level","toString","list","filter","appender","levels","find","toUpperCase","map","charRepeater","x","char","res","buildStartLine","fields","settings","line","Object","keys","key","index","length","padding","buildEndLine","buildLine","buildLineData","scope","drawTable","header","undefined","route","Math","max","output","LogEvent","_categoryName","_level","_data","_context","Date","startTime","data","time","_startTime","categoryName","formatedLevel","slice","context","cluster","pid","LogLevel","levelStr","getLevel","sArg","defaultLevel","DEFAULT_LOG_LEVELS","isLessThanOrEqualTo","otherLevel","isGreaterThanOrEqualTo","isEqualTo","ALL","Number","MIN_VALUE","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","MARK","OFF","MAX_VALUE","LogContext","toJSON","entries","reduce","value","Logger","_name","appenders","createStack","stack","replace","split","join","isLevelEnabled","debug","write","info","warn","fatal","trace","start","stop","shutdown","promises","Promise","all","printTable","logLevel","logEvent","Appender","options","target","prototype","appenderOptions","$name","LayoutsRegistry","Layouts","console","layoutKlass","BaseAppender","_config","configure","assign","_layout","defaultLayout","layout","args","transform","ConsoleAppender","log","bind","loggingEvent","timezoneOffset","streams","require","eol","Os","EOL","FileAppender","reopen","then","build","process","removeListener","listener","resolve","reject","writer","end","filename","file","maxLogSize","logSize","backups","numBackups","pattern","Path","normalize","openTheStream","on","fileSize","numFiles","stream","DateRollingFileStream","RollingFileStream","err","StderrAppender","stderr","StdoutAppender","stdout","LOG_COLORS","BaseLayout","Layout","styles","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","colorizeStart","style","colorizeEnd","colorize","str","removeColors","dateFormat","timestampLevelAndCategory","colour","Util","format","asString","BasicLayout","concat","ColoredLayout","color","DummyLayout","MessagePassThroughLayout","truncate","truncation","toTruncate","len","parseInt","substr","substring","pad","toPad","charAt","truncateAndPad","toTruncAndPad","replacement","LayoutReplacer","tokens","specifier","loggerName","precision","loggerNameBits","ISO8601_FORMAT","ISO8601_WITH_TZ_OFFSET_FORMAT","ABSOLUTETIME_FORMAT","DATETIME_FORMAT","hostname","master","worker","workerId","c","d","formatAsDate","h","m","formatMessage","j","formatJson","n","endOfLine","p","r","startColour","endColour","y","clusterInfo","z","percent","userDefined","regex","TTCC_CONVERSION_PATTERN","PatternLayout","conversionCharacter","formattedString","result","searchString","exec","text","replaceToken","JsonLayout","current","$log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,MAAMA,iBAAiB,GAAmC,IAAIC,GAAJ,EAA1D;;MCEMC;AAAbC,EAAAA;AACU,mBAAA,GAA2C,IAAIF,GAAJ,EAA3C;AACA,cAAA,GAA0B,IAAIA,GAAJ,EAA1B;AA0GT;;AAxGS,MAAJG,IAAI;AACN,WAAO,KAAKC,UAAL,CAAgBD,IAAvB;AACD;AAED;;;;;;;AAKAE,EAAAA,GAAG,CAACC,IAAD;AACD,WAAO,KAAKF,UAAL,CAAgBC,GAAhB,CAAoBC,IAApB,CAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,GAAG,CAACD,IAAD;AACD,WAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoBD,IAApB,CAAP;AACD;AAED;;;;;;;;AAMAE,EAAAA,GAAG,CAACF,IAAD,EAAeG,MAAf;AACD,QAAI,CAACV,iBAAiB,CAACM,GAAlB,CAAsBI,MAAM,CAACC,IAA7B,CAAL,EAAyC;AACvC,YAAMC,KAAK,GAAG,IAAIC,KAAJ,aAAsBH,MAAM,CAACC,mDAAmDG,IAAI,CAACC,SAAL,CAAeL,MAAf,KAAhF,CAAd;AACAE,MAAAA,KAAK,CAACL,IAAN,GAAa,iBAAb;AACA,YAAMK,KAAN;AACD;;AAED,UAAMI,KAAK,GAAGhB,iBAAiB,CAACQ,GAAlB,CAAsBE,MAAM,CAACC,IAA7B,EAAoCM,OAAlD;AACA,UAAMC,QAAQ,GAAiB,IAAIF,KAAJ,CAAUN,MAAV,CAA/B;;AAEA,SAAKL,UAAL,CAAgBI,GAAhB,CAAoBF,IAApB,EAA0B;AAACA,MAAAA,IAAD;AAAOW,MAAAA,QAAP;AAAiBR,MAAAA;AAAjB,KAA1B;;AACA,SAAKS,KAAL,CAAWC,KAAX;;AACA,WAAO,IAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAACd,IAAD;AACJ,QAAIe,OAAO,GAAG,KAAKjB,UAAL,CAAgBgB,MAAhB,CAAuBd,IAAvB,CAAd;;AACA,QAAIe,OAAJ,EAAa;AACX,WAAKH,KAAL,CAAWC,KAAX;AACD;;AACD,WAAOE,OAAP;AACD;AAED;;;;;AAGAF,EAAAA,KAAK;AACH,SAAKf,UAAL,CAAgBe,KAAhB;;AACA,SAAKD,KAAL,CAAWC,KAAX;AACD;AAED;;;;;;;AAKAG,EAAAA,OAAO,CAACC,QAAD,EAA6FC,OAA7F;AACL,SAAKpB,UAAL,CAAgBkB,OAAhB,CAAwBC,QAAxB,EAAkCC,OAAlC;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO;AACL,UAAMC,KAAK,GAAU,EAArB;;AACA,SAAKtB,UAAL,CAAgBkB,OAAhB,CAAwBK,CAAC,IAAID,KAAK,CAACE,IAAN,CAAWD,CAAX,CAA7B;;AACA,WAAOD,KAAP;AACD;AAED;;;;;;;AAKAG,EAAAA,UAAU,CAACC,YAAD;AACR,UAAMC,KAAK,GAAGD,YAAY,CAACE,QAAb,EAAd;;AACA,QAAI,KAAKd,KAAL,CAAWb,GAAX,CAAe0B,KAAf,CAAJ,EAA2B;AACzB,aAAO,KAAKb,KAAL,CAAWX,GAAX,CAAewB,KAAf,CAAP;AACD;;AAED,UAAME,IAAI,GAAG,KAAKR,OAAL,GACVS,MADU,CACHC,QAAQ,IACdA,QAAQ,CAAC1B,MAAT,CAAgB2B,MAAhB,GAAyBD,QAAQ,CAAC1B,MAAT,CAAgB2B,MAAhB,CAAuBC,IAAvB,CAA6BN,KAAD,IAAmBA,KAAK,CAACO,WAAN,OAAwBR,YAAY,CAACE,QAAb,EAAvE,CAAzB,GAA2H,IAFlH,EAIVO,GAJU,CAINJ,QAAQ,IAAIA,QAAQ,CAAClB,QAJf,CAAb;;AAMA,SAAKC,KAAL,CAAWV,GAAX,CAAesB,YAAY,CAACE,QAAb,EAAf,EAAwCC,IAAxC;;AAEA,WAAOA,IAAP;AACD;;;;SC/GaO,aAAaC,GAAWC,IAAI,GAAG;AAC7C,MAAIC,GAAG,GAAG,EAAV;;AACA,SAAOF,CAAC,EAAR,EAAYE,GAAG,IAAID,IAAP;;AACZ,SAAOC,GAAP;AACD;AAED;;;;;SAIgBC,eAAeC,QAAaC;AAC1C,MAAIC,IAAI,GAAG,GAAX;AACA,MAAId,IAAI,GAAGe,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAX;AAEAZ,EAAAA,IAAI,CAACX,OAAL,CAAa,CAAC4B,GAAD,EAAMC,KAAN;AACX,QAAIA,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAKlB,IAAI,CAACmB,MAAlC,EAA0C;AACxCL,MAAAA,IAAI,IAAI,GAAR;AACD;;AAEDA,IAAAA,IAAI,IAAIP,YAAY,CAACK,MAAM,CAACK,GAAD,CAAN,GAAc,IAAIJ,QAAQ,CAACO,OAA5B,EAAsC,GAAtC,CAApB;AACD,GAND;AAQAN,EAAAA,IAAI,IAAI,GAAR;AAEA,SAAOA,IAAP;AACD;AAED;;;;;;;SAMgBO,aAAaT,QAAaC;AACxC,MAAIC,IAAI,GAAG,GAAX;AACA,MAAId,IAAI,GAAGe,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAX;AAEAZ,EAAAA,IAAI,CAACX,OAAL,CAAa,CAAC4B,GAAD,EAAMC,KAAN;AACX,QAAIA,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAKlB,IAAI,CAACmB,MAAlC,EAA0C;AACxCL,MAAAA,IAAI,IAAI,GAAR;AACD;;AAEDA,IAAAA,IAAI,IAAIP,YAAY,CAACK,MAAM,CAACK,GAAD,CAAN,GAAc,IAAIJ,QAAQ,CAACO,OAA5B,EAAsC,GAAtC,CAApB;AACD,GAND;AAQAN,EAAAA,IAAI,IAAI,GAAR;AACA,SAAOA,IAAP;AACD;AAED;;;;;;;;SAOgBQ,UAAUV,QAAaC,UAA0BJ,IAAI,GAAG;AACtE,MAAIK,IAAI,GAAG,EAAX;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBvB,OAApB,CAA4B4B,GAAG;AAC7BH,IAAAA,IAAI,IAAI,GAAR;AACAA,IAAAA,IAAI,IAAIP,YAAY,CAACK,MAAM,CAACK,GAAD,CAAN,GAAc,IAAIJ,QAAQ,CAACO,OAA5B,EAAsCX,IAAtC,CAApB;AACD,GAHD;AAKAK,EAAAA,IAAI,IAAI,GAAR;AACA,SAAOA,IAAP;AACD;AAED;;;;SAGgBS,cAAcC,OAAYZ,QAAaC;AACrD,MAAIC,IAAI,GAAG,EAAX;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBvB,OAApB,CAA4B4B,GAAG;AAC7BH,IAAAA,IAAI,IAAI,IAAR;AACAA,IAAAA,IAAI,IAAIU,KAAK,CAACP,GAAD,CAAb;AACAH,IAAAA,IAAI,IAAIP,YAAY,CAACK,MAAM,CAACK,GAAD,CAAN,GAAc,KAAKJ,QAAQ,CAACO,OAAT,GAAoB,CAAzB,CAAd,GAA4CI,KAAK,CAACP,GAAD,CAAL,CAAWE,MAAxD,EAAgE,GAAhE,CAApB;AACAL,IAAAA,IAAI,IAAI,GAAR;AACD,GALD;AAOAA,EAAAA,IAAI,IAAI,GAAR;AACA,SAAOA,IAAP;AACD;AAED;;;;;;;SAMgBW,UAAUzB,MAAaa,WAA2B;AAChEA,EAAAA,QAAQ,CAACO,OAAT,GAAmBP,QAAQ,CAACO,OAAT,IAAoB,CAAvC;;AAEA,MAAIP,QAAQ,CAACa,MAAT,KAAoBC,SAAxB,EAAmC;AACjCd,IAAAA,QAAQ,CAACa,MAAT,GAAkB,EAAlB;AAEAX,IAAAA,MAAM,CAACC,IAAP,CAAYhB,IAAI,CAAC,CAAD,CAAhB,EAAqBX,OAArB,CAA6B4B,GAAG,IAAKJ,QAAQ,CAACa,MAAT,CAAiBT,GAAjB,IAAwBA,GAA7D;AACD;;AAED,QAAML,MAAM,GAAQ,EAApB;;AAIAG,EAAAA,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACa,MAArB,EAA6BrC,OAA7B,CAAqC4B,GAAG,IAAKL,MAAM,CAACK,GAAD,CAAN,GAAcJ,QAAQ,CAACa,MAAT,CAAiBT,GAAjB,EAAsBE,MAAjF;AAEAnB,EAAAA,IAAI,CAACX,OAAL,CAAauC,KAAK;AAChBb,IAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBvB,OAApB,CAA4B4B,GAAG,IAAKL,MAAM,CAACK,GAAD,CAAN,GAAcY,IAAI,CAACC,GAAL,CAAS,CAAC,KAAKF,KAAK,CAACX,GAAD,CAAX,EAAkBE,MAA3B,EAAmCP,MAAM,CAACK,GAAD,CAAzC,CAAlD;AACD,GAFD;AAIA,MAAIc,MAAM,GAAG,EAAb;AAEAA,EAAAA,MAAM,IAAIpB,cAAc,CAACC,MAAD,EAASC,QAAT,CAAd,GAAmC,IAA7C;AACAkB,EAAAA,MAAM,IAAIR,aAAa,CAACV,QAAQ,CAACa,MAAV,EAAkBd,MAAlB,EAA0BC,QAA1B,CAAb,GAAmD,IAA7D;AAEAb,EAAAA,IAAI,CAACX,OAAL,CAAamC,KAAK;AAChBO,IAAAA,MAAM,IAAIT,SAAS,CAACV,MAAD,EAASC,QAAT,CAAT,GAA8B,IAAxC;AACAkB,IAAAA,MAAM,IAAIR,aAAa,CAACC,KAAD,EAAQZ,MAAR,EAAgBC,QAAhB,CAAb,GAAyC,IAAnD;AACD,GAHD;AAKAkB,EAAAA,MAAM,IAAIV,YAAY,CAACT,MAAD,EAASC,QAAT,CAAtB;AAEA,SAAOkB,MAAP;AACD;;MC/HYC;AACX;;;;;;;;AAQA/D,EAAAA,YAAoBgE,eAA+BC,QAA0BC,OAAsBC;AAA/E,sBAAA,GAAAH,aAAA;AAA+B,eAAA,GAAAC,MAAA;AAA0B,cAAA,GAAAC,KAAA;AAAsB,iBAAA,GAAAC,QAAA;AAG3F,mBAAA,GAAa,IAAIC,IAAJ,EAAb;AAFP;;AAIY,MAATC,SAAS;AACX,WAAO,KAAKC,IAAL,IAAa,KAAKA,IAAL,CAAU,CAAV,CAAb,IAA6B,KAAKA,IAAL,CAAU,CAAV,EAAaC,IAA1C,GAAiD,KAAKD,IAAL,CAAU,CAAV,EAAaC,IAA9D,GAAqE,KAAKC,UAAjF;AACD;;AAEsB,MAAZC,YAAY;AACrB,WAAO,KAAKT,aAAZ;AACD;;AAEe,MAALnC,KAAK;AACd,WAAO,KAAKoC,MAAZ;AACD;;AAEuB,MAAbS,aAAa;AACtB,WAAO,CAAC,KAAK7C,KAAL,CAAWC,QAAX,KAAwB,OAAzB,EAAkC6C,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C,CAAP;AACD;;AAEc,MAAJL,IAAI;AACb,WAAO,KAAKJ,KAAZ;AACD;;AAEc,MAAJI,IAAI,CAACA,IAAD;AACb,SAAKJ,KAAL,GAAaI,IAAb;AACD;;AAEiB,MAAPM,OAAO;AAChB,WAAO,KAAKT,QAAZ;AACD;;AAEiB,MAAPU,OAAO;AAChB,WAAO,EAAP;AACD;;AAEa,MAAHC,GAAG;AACZ,WAAO,KAAKF,OAAL,CAAavE,GAAb,CAAiB,KAAjB,CAAP;AACD;;;;ACnDH;;;;AAGA;MAEa0E;AACX/E,EAAAA,YAAqB6B,OAAwBmD;AAAxB,cAAA,GAAAnD,KAAA;AAAwB,iBAAA,GAAAmD,QAAA;AAC3C,SAAKnD,KAAL,GAAaA,KAAb;AACA,SAAKmD,QAAL,GAAgBA,QAAhB;AACD;;AAEc,SAARC,QAAQ,CAACC,IAAD,EAAgCC,YAAhC;AACb,QAAID,IAAI,YAAYH,QAApB,EAA8B;AAC5B,aAAOG,IAAP;AACD;;AAED,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAMjC,KAAK,GAAQiC,IAAI,CAAC9C,WAAL,EAAnB;AACA,aAAQgD,kBAA0B,CAACnC,KAAD,CAA1B,IAAqCkC,YAA7C;AACD;;AAED,WAAO,KAAKF,QAAL,CAAcC,IAAI,CAACpD,QAAL,EAAd,CAAP;AACD;;AAEDA,EAAAA,QAAQ;AACN,WAAO,KAAKkD,QAAZ;AACD;;AAEDK,EAAAA,mBAAmB,CAACC,UAAD;AACjB,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAGP,QAAQ,CAACE,QAAT,CAAkBK,UAAlB,CAAb;AACD;;AACD,WAAO,KAAKzD,KAAL,IAAeyD,UAAuB,CAACzD,KAA9C;AACD;;AAED0D,EAAAA,sBAAsB,CAACD,UAAD;AACpB,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAGP,QAAQ,CAACE,QAAT,CAAkBK,UAAlB,CAAb;AACD;;AACD,WAAO,KAAKzD,KAAL,IAAeyD,UAAuB,CAACzD,KAA9C;AACD;;AAED2D,EAAAA,SAAS,CAACF,UAAD;AACP,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAGP,QAAQ,CAACE,QAAT,CAAkBK,UAAlB,CAAb;AACD;;AACD,WAAO,KAAKzD,KAAL,KAAgByD,UAAuB,CAACzD,KAA/C;AACD;;;AAGH,MAAMuD,kBAAkB,GAAG;AACzBK,EAAAA,GAAG,EAAE,IAAIV,QAAJ,CAAaW,MAAM,CAACC,SAApB,EAA+B,KAA/B,CADoB;AAEzBC,EAAAA,KAAK,EAAE,IAAIb,QAAJ,CAAa,IAAb,EAAmB,OAAnB,CAFkB;AAGzBc,EAAAA,KAAK,EAAE,IAAId,QAAJ,CAAa,KAAb,EAAoB,OAApB,CAHkB;AAIzBe,EAAAA,IAAI,EAAE,IAAIf,QAAJ,CAAa,KAAb,EAAoB,MAApB,CAJmB;AAKzBgB,EAAAA,IAAI,EAAE,IAAIhB,QAAJ,CAAa,KAAb,EAAoB,MAApB,CALmB;AAMzBiB,EAAAA,KAAK,EAAE,IAAIjB,QAAJ,CAAa,KAAb,EAAoB,OAApB,CANkB;AAOzBkB,EAAAA,KAAK,EAAE,IAAIlB,QAAJ,CAAa,KAAb,EAAoB,OAApB,CAPkB;AAQzBmB,EAAAA,IAAI,EAAE,IAAInB,QAAJ,CAAa,gBAAb,EAA+B,MAA/B,CARmB;AASzBoB,EAAAA,GAAG,EAAE,IAAIpB,QAAJ,CAAaW,MAAM,CAACU,SAApB,EAA+B,KAA/B;AAToB,CAA3B;SAYgBlE;AACd,SAAOkD,kBAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MChEYiB,mBAAmBvG;AAC9BwG,EAAAA,MAAM;AACJ,WAAO,CAAC,GAAG,KAAKC,OAAL,EAAJ,EAAoBC,MAApB,CAA2B,CAAC5B,OAAD,EAAU,CAAC5B,GAAD,EAAMyD,KAAN,CAAV;AAChC,0BACK7B,OADL;AAEE,SAAC5B,GAAD,GAAOyD;AAFT;AAID,KALM,EAKJ,EALI,CAAP;AAMD;;;;MCDUC;AACX;;;AAGA1G,EAAAA,YAAoB2G,QAAgB;AAAhB,cAAA,GAAAA,KAAA;AAIZ,mBAAA,GAA8B,IAAI5G,eAAJ,EAA9B;AAgBR;;;;AAGQ,iBAAA,GAAuB,IAAIsG,UAAJ,EAAvB;AAtBN,SAAKxE,KAAL,GAAa,KAAb;AACD;;AAIY,MAAT+E,SAAS;AACX,WAAO,KAAK1G,UAAZ;AACD;;AAIQ,MAAL2B,KAAK;AACP,WAAO,KAAKoC,MAAL,CAAYnC,QAAZ,EAAP;AACD;;AAEQ,MAALD,KAAK,CAACA,KAAD;AACP,SAAKoC,MAAL,GAAcc,QAAQ,CAACE,QAAT,CAAkBpD,KAAlB,EAAyB,OAAzB,CAAd;AACD;;AAOU,MAAP+C,OAAO;AACT,WAAO,KAAKT,QAAZ;AACD;;AAEO,MAAJ/D,IAAI;AACN,WAAO,KAAKuG,KAAZ;AACD;;AAEO,MAAJvG,IAAI,CAACqG,KAAD;AACN,SAAKE,KAAL,GAAaF,KAAb;AACD;AAED;;;;;;AAIyB,SAAXI,WAAW;AACvB,UAAMC,KAAK,GAAW,IAAIpG,KAAJ,GAAYoG,KAAZ,CAAmBC,OAAnB,CAA2B,SAA3B,EAAsC,EAAtC,CAAtB;AAEA,WAAOD,KAAK,CAACE,KAAN,CAAY,IAAZ,EACJhF,MADI,CACG,CAACa,IAAD,EAAOI,KAAP,KAAiBA,KAAK,IAAI,CAD7B,EAEJgE,IAFI,CAEC,IAFD,CAAP;AAGD;;AAEMC,EAAAA,cAAc,CAAC5B,UAAD;AACnB,WAAO,KAAKrB,MAAL,CAAYoB,mBAAZ,CAAgCC,UAAhC,CAAP;AACD;AAED;;;;;;;AAKO6B,EAAAA,KAAK,CAAC,GAAG7C,IAAJ;AACV,WAAO,KAAK8C,KAAL,CAAWlF,MAAM,GAAG2D,KAApB,EAA2BvB,IAA3B,CAAP;AACD;AAED;;;;;;;AAKO+C,EAAAA,IAAI,CAAC,GAAG/C,IAAJ;AACT,WAAO,KAAK8C,KAAL,CAAWlF,MAAM,GAAG4D,IAApB,EAA0BxB,IAA1B,CAAP;AACD;AAED;;;;;;;AAKOgD,EAAAA,IAAI,CAAC,GAAGhD,IAAJ;AACT,WAAO,KAAK8C,KAAL,CAAWlF,MAAM,GAAG6D,IAApB,EAA0BzB,IAA1B,CAAP;AACD;AAED;;;;;;;;;;AAQO7D,EAAAA,KAAK,CAAC,GAAG6D,IAAJ;AACV,WAAO,KAAK8C,KAAL,CAAWlF,MAAM,GAAG8D,KAApB,EAA2B1B,IAA3B,CAAP;AACD;;AAEMiD,EAAAA,KAAK,CAAC,GAAGjD,IAAJ;AACV,WAAO,KAAK8C,KAAL,CAAWlF,MAAM,GAAG+D,KAApB,EAA2B3B,IAA3B,CAAP;AACD;AAED;;;;;;;AAKOkD,EAAAA,KAAK,CAAC,GAAGlD,IAAJ;AACV,UAAMwC,KAAK,GAAG,OAAOJ,MAAM,CAACG,WAAP,EAAP,GAA8B,IAA5C;AACAvC,IAAAA,IAAI,CAAC5C,IAAL,CAAUoF,KAAV;AACA,WAAO,KAAKM,KAAL,CAAWlF,MAAM,GAAG0D,KAApB,EAA2BtB,IAA3B,CAAP;AACD;AAED;;;;;AAGOmD,EAAAA,KAAK;AACV,SAAK5F,KAAL,GAAa,KAAb;AACA,WAAO,IAAP;AACD;AAED;;;;;AAGO6F,EAAAA,IAAI;AACT,SAAK7F,KAAL,GAAa,KAAb;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIO8F,EAAAA,QAAQ;AACb,SAAKD,IAAL;AAEA,UAAME,QAAQ,GAAG,KAAKhB,SAAL,CACdrF,OADc,GAEdS,MAFc,CAEPC,QAAQ,IAAI,CAAC,CAACA,QAAQ,CAAClB,QAAT,CAAkB4G,QAFzB,EAGdtF,GAHc,CAGVJ,QAAQ,IAAIA,QAAQ,CAAClB,QAAT,CAAkB4G,QAAlB,EAHF,CAAjB;AAKA,WAAOE,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAP;AACD;AAED;;;;;;;AAKOpE,EAAAA,SAAS,CAACzB,IAAD,EAAca,WAA2B,EAAzC;AACd,WAAOY,SAAS,CAACzB,IAAD,EAAOa,QAAP,CAAhB;AACD;AAED;;;;;;;;AAMOmF,EAAAA,UAAU,CAAChG,IAAD,EAAca,WAA2B,EAAzC;AACf,SAAKyE,IAAL,MAAe,KAAK7D,SAAL,CAAezB,IAAf,EAAqBa,QAArB,GAAf;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIQwE,EAAAA,KAAK,CAACY,QAAD,EAAqB1D,IAArB;AACX,QAAI,CAAC,KAAK4C,cAAL,CAAoBc,QAApB,CAAL,EAAoC,OAAO,IAAP;AAEpC,UAAMC,QAAQ,GAAG,IAAIlE,QAAJ,CAAa,KAAK4C,KAAlB,EAAyBqB,QAAzB,EAAmC1D,IAAnC,EAAyC,KAAKH,QAA9C,CAAjB;AAEA,SAAKyC,SAAL,CAAejF,UAAf,CAA0BqG,QAA1B,EAAoC5G,OAApC,CAA6Ca,QAAD;AAC1CA,MAAAA,QAAQ,CAACmF,KAAT,CAAea,QAAf;AACD,KAFD;AAIA,WAAO,IAAP;AACD;;;;ACvLH;;;SAOgBC,SAASC;AACvB,SAAQC,MAAD;AACLA,IAAAA,MAAM,CAACC,SAAP,CAAiBC,eAAjB,GAAmCH,OAAnC;AACAC,IAAAA,MAAM,CAACG,KAAP,GAAeJ,OAAO,CAAC/H,IAAvB;AACAP,IAAAA,iBAAiB,CAACS,GAAlB,CAAsB6H,OAAO,CAAC/H,IAA9B,EAAoC;AAACU,MAAAA,OAAO,EAAEsH;AAAV,KAApC;AACD,GAJD;AAKD;;ACRM,MAAMI,eAAe,GAAiC,IAAI1I,GAAJ,EAAtD;;MCDM2I;AACD,SAAHpI,GAAG,CAACD,IAAD,EAAqBG,MAArB;AACR,QAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAGA,IAAI,CAACmI,KAAZ;AACD;;AAED,QAAI,CAACC,eAAe,CAACrI,GAAhB,CAAoBC,IAApB,CAAL,EAAgC;AAC9BA,MAAAA,IAAI,GAAG,SAAP;AACAsI,MAAAA,OAAO,CAACpB,IAAR,CAAalH,IAAI,GAAG,wBAApB;AACD;;AAED,UAAMuI,WAAW,GAAQH,eAAe,CAACnI,GAAhB,CAAoBD,IAApB,CAAzB;AAEA,WAAO,IAAIuI,WAAW,CAAC7H,OAAhB,CAAwBP,MAAxB,CAAP;AACD;;;;ACKH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkCsBqI;AAMpB5I,EAAAA,YAAoB6I;AAAA,gBAAA,GAAAA,OAAA;AAJZ,wBAAA,GAAoC;AAACzI,MAAAA,IAAI,EAAE;AAAP,KAApC;AAKN,SAAK0I,SAAL,CAAeD,OAAf;;AAEA,QAAI,KAAK,OAAL,CAAJ,EAAmB;AACjB,WAAK,OAAL;AACD;AACF;;AAES,MAANtI,MAAM;AACR,WAAO,KAAKsI,OAAZ;AACD;;AAEDC,EAAAA,SAAS,CAACvI,MAAD;AACPuC,IAAAA,MAAM,CAACiG,MAAP,CAAc,KAAKF,OAAnB,EAA4BtI,MAA5B;AAEA,SAAKyI,OAAL,GAAeP,OAAO,CAACpI,GAAR,CAAY,KAAKiI,eAAL,CAAqBW,aAArB,IAAsC,SAAlD,EAA6D,KAAKJ,OAAlE,CAAf;;AAEA,QAAI,KAAKA,OAAL,CAAaK,MAAjB,EAAyB;AACvB,WAAKF,OAAL,GAAeP,OAAO,CAACpI,GAAR,CAAY,KAAKwI,OAAL,CAAaK,MAAb,CAAoB1I,IAAhC,EAAsC,KAAKqI,OAAL,CAAaK,MAAnD,CAAf;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;;;;AAIAA,EAAAA,MAAM,CAAC,GAAGC,IAAJ;AACJ,WAAO,KAAKH,OAAL,CAAaI,SAAb,CAAuB,GAAGD,IAA1B,CAAP;AACD;;;;ACpFH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BaE,uBAAe,GAA5B,MAAaA,eAAb,SAAqCT,YAArC;AAAA5I,EAAAA;;AACU,YAAA,GAAM0I,OAAO,CAACY,GAAR,CAAYC,IAAZ,CAAiBb,OAAjB,CAAN;AAKT;;AAHCtB,EAAAA,KAAK,CAACoC,YAAD;AACH,SAAKF,GAAL,CAAS,KAAKJ,MAAL,CAAYM,YAAZ,EAA0B,KAAKjJ,MAAL,CAAYkJ,cAAtC,CAAT;AACD;;;AALUJ,uBAAe,qBAD3BnB,QAAQ,CAAC;AAAC9H,EAAAA,IAAI,EAAE;AAAP,CAAD,IACIiJ,wBAAA;;ACpCb;;;;AAWA,MAAMK,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,KAAG,GAAGC,aAAE,CAACC,GAAH,IAAU,IAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEaC,oBAAY,GAAzB,MAAaA,YAAb,SAAkCnB,YAAlC;AAIE;;;AAGOoB,EAAAA,MAAM;AACX,WAAO,KAAKrC,QAAL,GAAgBsC,IAAhB,CAAqB;AAC1B,WAAKC,KAAL;AACD,KAFM,CAAP;AAGD;AAED;;;;;AAGOvC,EAAAA,QAAQ;AACbwC,IAAAA,OAAO,CAACC,cAAR,CAAuB,QAAvB,EAAiC,KAAKC,QAAtC;AAEA,WAAO,IAAIxC,OAAJ,CAAY,CAACyC,OAAD,EAAUC,MAAV;AACjB,WAAKC,MAAL,CAAYpD,KAAZ,CAAkB,EAAlB,EAAsB,OAAtB,EAA+B;AAC7B,aAAKoD,MAAL,CAAYC,GAAZ,CAAgBH,OAAhB;AACD,OAFD;AAGD,KAJM,CAAP;AAKD;AAED;;;;;;AAIOlD,EAAAA,KAAK,CAACoC,YAAD;AACV,SAAKgB,MAAL,CAAYpD,KAAZ,CAAkB,KAAK8B,MAAL,CAAYM,YAAZ,EAA0B,KAAKjJ,MAAL,CAAYkJ,cAAtC,IAAwDG,KAA1E,EAA+E,MAA/E;AACD;;AAEOM,EAAAA,KAAK;AACX,QAAI;AAACQ,MAAAA,QAAQ,EAAEC,IAAX;AAAiBC,MAAAA,UAAU,EAAEC,OAA7B;AAAsCC,MAAAA,OAAO,EAAEC,UAA/C;AAA2DC,MAAAA;AAA3D,QAAsE,KAAKzK,MAA/E;AAEAoK,IAAAA,IAAI,GAAGM,eAAI,CAACC,SAAL,CAAeP,IAAf,CAAP;AACAI,IAAAA,UAAU,GAAGA,UAAU,KAAKrH,SAAf,GAA2B,CAA3B,GAA+BqH,UAA5C;;AAEAA,IAAAA,UAAU,GAAGA,UAAU,KAAK,CAAf,GAAmB,CAAnB,GAAuBA,UAApC;AAEA,SAAKP,MAAL,GAAc,KAAKW,aAAL,CAAmBR,IAAnB,EAAyBE,OAAzB,EAAkCE,UAAlC,EAA8CC,OAA9C,EAAuD,KAAKzK,MAA5D,CAAd;AAEA;AACA;;AACA,SAAK8J,QAAL,GAAgB,MAAM,KAAKL,MAAL,EAAtB;;AAEAG,IAAAA,OAAO,CAACiB,EAAR,CAAW,QAAX,EAAqB,KAAKf,QAA1B;AACD;AAED;;;;;;;;;;AAQQc,EAAAA,aAAa,CAACR,IAAD,EAAeU,QAAf,EAA6CC,QAA7C,EAA+DN,OAA/D,EAA4F7C,OAA5F;AACnB,QAAIoD,MAAM,GAAG,IAAb;;AACA,QAAIP,OAAJ,EAAa;AACXO,MAAAA,MAAM,GAAG,IAAI7B,OAAO,CAAC8B,qBAAZ,CAAkCb,IAAlC,EAAwCK,OAAxC,EAAiD7C,OAAjD,CAAT;AACD,KAFD,MAEO;AACLoD,MAAAA,MAAM,GAAG,IAAI7B,OAAO,CAAC+B,iBAAZ,CAA8Bd,IAA9B,EAAoCU,QAApC,EAA8CC,QAA9C,EAAwDnD,OAAxD,CAAT;AACD;;AACDoD,IAAAA,MAAM,CAACH,EAAP,CAAU,OAAV,EAAoBM,GAAD;AACjBhD,MAAAA,OAAO,CAACjI,KAAR,CAAc,oDAAd,EAAoEkK,IAApE,EAA0Ee,GAA1E;AACD,KAFD;AAGA,WAAOH,MAAP;AACD;;;AAtEUxB,oBAAY,qBADxB7B,QAAQ,CAAC;AAAC9H,EAAAA,IAAI,EAAE,MAAP;AAAe6I,EAAAA,aAAa,EAAE;AAA9B,CAAD,IACIc,qBAAA;;AC9Eb;;;;;;;;;;;;;;;;;;;;;;;;;;AA0Ba4B,sBAAc,GAA3B,MAAaA,cAAb,SAAoC/C,YAApC;AAAA5I,EAAAA;;AACU,YAAA,GAAMmK,OAAO,CAACyB,MAAR,CAAexE,KAAf,CAAqBmC,IAArB,CAA0BY,OAAO,CAACyB,MAAlC,CAAN;AAKT;;AAHCxE,EAAAA,KAAK,CAACoC,YAAD;AACH,SAAKF,GAAL,IAAY,KAAKJ,MAAL,CAAYM,YAAZ,EAA0B,KAAKjJ,MAAL,CAAYkJ,cAAtC,KAAZ;AACD;;;AALUkC,sBAAc,qBAD1BzD,QAAQ,CAAC;AAAC9H,EAAAA,IAAI,EAAE;AAAP,CAAD,IACIuL,uBAAA;;AC1Bb;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BaE,sBAAc,GAA3B,MAAaA,cAAb,SAAoCjD,YAApC;AAAA5I,EAAAA;;AACU,YAAA,GAAMmK,OAAO,CAAC2B,MAAR,CAAe1E,KAAf,CAAqBmC,IAArB,CAA0BY,OAAO,CAAC2B,MAAlC,CAAN;AAKT;;AAHC1E,EAAAA,KAAK,CAACoC,YAAD;AACH,SAAKF,GAAL,IAAY,KAAKJ,MAAL,CAAYM,YAAZ,EAA0B,KAAKjJ,MAAL,CAAYkJ,cAAtC,KAAZ;AACD;;;AALUoC,sBAAc,qBAD1B3D,QAAQ,CAAC;AAAC9H,EAAAA,IAAI,EAAE;AAAP,CAAD,IACIyL,uBAAA;;AClCDE;;AAAZ,WAAYA;AACVA,EAAAA,iBAAA,SAAA;AACAA,EAAAA,kBAAA,UAAA;AACAA,EAAAA,mBAAA,SAAA;AACAA,EAAAA,kBAAA,WAAA;AACAA,EAAAA,mBAAA,SAAA;AACAA,EAAAA,mBAAA,QAAA;AACAA,EAAAA,mBAAA,YAAA;AACAA,EAAAA,iBAAA,SAAA;AACD,CATD,EAAYA,kBAAU,KAAVA,kBAAU,KAAA,CAAtB;;MCGsBC;AACpBhM,EAAAA,YAAsBO;AAAA,eAAA,GAAAA,MAAA;AAAqC;;;;SCF7C0L,OAAO9D;AACrB,SAAQC,MAAD;AACLA,IAAAA,MAAM,CAACG,KAAP,GAAeJ,OAAO,CAAC/H,IAAvB;AACAoI,IAAAA,eAAe,CAAClI,GAAhB,CAAoB6H,OAAO,CAAC/H,IAA5B,EAAkC;AAACU,MAAAA,OAAO,EAAEsH;AAAV,KAAlC;AACD,GAHD;AAID;;ACPD,MAAM8D,MAAM,GAAQ;AAClB;AACAC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,CAFY;AAGlBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAHU;AAIlBC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,EAAJ,CAJO;AAKlBC,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,EAAJ,CALS;AAMlB;AACAC,EAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CAPW;AAQlBC,EAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CARY;AASlBC,EAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CATW;AAUlB;AACAC,EAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CAXY;AAYlBC,EAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CAZY;AAalBC,EAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CAbW;AAclBC,EAAAA,OAAO,EAAE,CAAC,EAAD,EAAK,EAAL,CAdS;AAelBC,EAAAA,GAAG,EAAE,CAAC,EAAD,EAAK,EAAL,CAfa;AAgBlBC,EAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL;AAhBU,CAApB;SAmBgBC,cAAcC;AAC5B,SAAOA,KAAK,WAAWf,MAAM,CAACe,KAAD,CAAN,CAAc,CAAd,IAAX,GAAiC,EAA7C;AACD;SAEeC,YAAYD;AAC1B,SAAOA,KAAK,WAAWf,MAAM,CAACe,KAAD,CAAN,CAAc,CAAd,IAAX,GAAiC,EAA7C;AACD;SAEeE,SAASC,KAAaH;AACpC,SAAOD,aAAa,CAACC,KAAD,CAAb,GAAuBG,GAAvB,GAA6BF,WAAW,CAACD,KAAD,CAA/C;AACD;SAEeI,aAAaD;AAC3B,SAAOA,GAAG,CAACrG,OAAJ,CAAY,kBAAZ,EAAgC,EAAhC,CAAP;AACD;;AC7BD,MAAMuG,YAAU,GAAG3D,OAAO,CAAC,aAAD,CAA1B;;SAEgB4D,0BAA0B/D,cAAwBgE,QAAa/D;AAC7E,SAAO0D,QAAQ,CACbM,eAAI,CAACC,MAAL,CACE,mBADF,EAEEJ,YAAU,CAACK,QAAX,CAAoBnE,YAAY,CAACnF,SAAjC,EAA4CoF,cAA5C,CAFF,EAGED,YAAY,CAAC9E,aAHf,EAIE8E,YAAY,CAAC/E,YAJf,CADa,EAOb+I,MAPa,CAAf;AASD;;ACTYI,mBAAW,GAAxB,MAAaA,WAAb,SAAiC5B,UAAjC;AACE;;;;;;;;;AASA5C,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,WACE8D,yBAAyB,CAAC/D,YAAD,EAAe9F,SAAf,EAA0B+F,cAA1B,CAAzB,GAAsEgE,eAAI,CAACC,MAAL,CAAoB,GAAG,GAAGG,MAAH,CAAUrE,YAAY,CAAClF,IAAvB,CAAvB,CADxE;AAGD;;;AAdUsJ,mBAAW,qBADvB3B,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,IACMwN,oBAAA;;ACCAE,qBAAa,GAA1B,MAAaA,aAAb,SAAmC9B,UAAnC;AACE;;;;AAIA5C,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,UAAMxG,KAAK,GAAQuG,YAAY,CAAC3H,KAAb,CAAmBC,QAAnB,EAAnB;AACA,UAAMiM,KAAK,GAAGhC,kBAAU,CAAC9I,KAAD,CAAxB;AACA,WAAOsK,yBAAyB,CAAC/D,YAAD,EAAeuE,KAAf,EAAsBtE,cAAtB,CAAzB,GAAkEgE,eAAI,CAACC,MAAL,CAAoB,GAAG,GAAGG,MAAH,CAAUrE,YAAY,CAAClF,IAAvB,CAAvB,CAAzE;AACD;;;AATUwJ,qBAAa,qBADzB7B,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,IACM0N,sBAAA;;ACHAE,mBAAW,GAAxB,MAAaA,WAAb,SAAiChC,UAAjC;AACE5C,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,WAAOD,YAAY,CAAClF,IAAb,CAAkB,CAAlB,CAAP;AACD;;;AAHU0J,mBAAW,qBADvB/B,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,IACM4N,oBAAA;;ACCAC,gCAAwB,GAArC,MAAaA,wBAAb,SAA8CjC,UAA9C;AACE5C,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,WAAQgE,eAAI,CAACC,MAAL,CAAoB,GAAG,GAAGG,MAAH,CAAUrE,YAAY,CAAClF,IAAvB,CAAvB,CAAR;AACD;;;AAHU2J,gCAAwB,qBADpChC,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,IACM6N,iCAAA;;SCNGC,SAASC,YAAoBC;AAC3C,MAAIC,GAAJ;;AACA,MAAIF,UAAJ,EAAgB;AACdE,IAAAA,GAAG,GAAGC,QAAQ,CAACH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAd;AACA,WAAOH,UAAU,CAACI,SAAX,CAAqB,CAArB,EAAwBH,GAAxB,CAAP;AACD;;AAED,SAAOD,UAAP;AACD;SAEeK,IAAItL,SAAiBuL;AACnC,MAAIL,GAAJ;;AACA,MAAIlL,OAAJ,EAAa;AACX,QAAIA,OAAO,CAACwL,MAAR,CAAe,CAAf,MAAsB,GAA1B,EAA+B;AAC7BN,MAAAA,GAAG,GAAGC,QAAQ,CAACnL,OAAO,CAACoL,MAAR,CAAe,CAAf,CAAD,EAAoB,EAApB,CAAd,CAD6B;;AAG7B,aAAOG,KAAK,CAACxL,MAAN,GAAemL,GAAtB,EAA2B;AACzBK,QAAAA,KAAK,IAAI,GAAT;AACD;AACF,KAND,MAMO;AACLL,MAAAA,GAAG,GAAGC,QAAQ,CAACnL,OAAD,EAAU,EAAV,CAAd,CADK;;AAGL,aAAOuL,KAAK,CAACxL,MAAN,GAAemL,GAAtB,EAA2B;AACzBK,QAAAA,KAAK,OAAOA,OAAZ;AACD;AACF;AACF;;AACD,SAAOA,KAAP;AACD;SAEeE,eAAeC,eAAuBV,YAAoBhL;AACxE,MAAI2L,WAAW,GAAGD,aAAlB;AACAC,EAAAA,WAAW,GAAGZ,QAAQ,CAACC,UAAD,EAAaW,WAAb,CAAtB;AACAA,EAAAA,WAAW,GAAGL,GAAG,CAACtL,OAAD,EAAU2L,WAAV,CAAjB;AACA,SAAOA,WAAP;AACD;;AC3BD;;;;AAGA,MAAMxB,UAAU,GAAG3D,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGC,aAAE,CAACC,GAAH,IAAU,IAAtB;MAEaiF;AACX/O,EAAAA,YAAoBgP,QAAgCvF;AAAhC,eAAA,GAAAuF,MAAA;AAAgC,uBAAA,GAAAvF,cAAA;AAEpD;;;;;;;AAMO,qBAAA,GAAe,CAACD,YAAD,EAAyByF,SAAzB;AACpB,UAAIC,UAAU,GAAG1F,YAAY,CAAC/E,YAA9B;;AACA,UAAIwK,SAAJ,EAAe;AACb,cAAME,SAAS,GAAGb,QAAQ,CAACW,SAAD,EAAY,EAAZ,CAA1B;AACA,cAAMG,cAAc,GAAGF,UAAU,CAAClI,KAAX,CAAiB,GAAjB,CAAvB;;AACA,YAAImI,SAAS,GAAGC,cAAc,CAAClM,MAA/B,EAAuC;AACrCgM,UAAAA,UAAU,GAAGE,cAAc,CAACzK,KAAf,CAAqByK,cAAc,CAAClM,MAAf,GAAwBiM,SAA7C,EAAwDlI,IAAxD,CAA6D,GAA7D,CAAb;AACD;AACF;;AACD,aAAOiI,UAAP;AACD,KAVM;AAWP;;;;;;;;AAMO,qBAAA,GAAe,CAAC1F,YAAD,EAAyByF,SAAzB;AACpB,UAAIvB,MAAM,GAAGJ,UAAU,CAAC+B,cAAxB;;AACA,UAAIJ,SAAJ,EAAe;AACbvB,QAAAA,MAAM,GAAGuB,SAAT,CADa;;AAGb,YAAIvB,MAAM,KAAK,SAAf,EAA0B;AACxBA,UAAAA,MAAM,GAAGJ,UAAU,CAAC+B,cAApB;AACD,SAFD,MAEO,IAAI3B,MAAM,KAAK,wBAAf,EAAyC;AAC9CA,UAAAA,MAAM,GAAGJ,UAAU,CAACgC,6BAApB;AACD,SAFM,MAEA,IAAI5B,MAAM,KAAK,UAAf,EAA2B;AAChCA,UAAAA,MAAM,GAAGJ,UAAU,CAACiC,mBAApB;AACD,SAFM,MAEA,IAAI7B,MAAM,KAAK,MAAf,EAAuB;AAC5BA,UAAAA,MAAM,GAAGJ,UAAU,CAACkC,eAApB;AACD;AACF;;;AAED,aAAOlC,UAAU,CAACK,QAAX,CAAoBD,MAApB,EAA4BlE,YAAY,CAACnF,SAAzC,EAAoD,KAAKoF,cAAzD,CAAP;AACD,KAjBM;AAkBP;;;;;;AAIO,iBAAA,GAAW;AAChB,aAAOI,aAAE,CAAC4F,QAAH,GAAc3N,QAAd,EAAP;AACD,KAFM;AAGP;;;;;;;AAKO,sBAAA,GAAiB0H,YAAD;AACrB,aAAQiE,eAAI,CAACC,MAAL,CAAoB,GAAGlE,YAAY,CAAClF,IAApC,CAAR;AACD,KAFM;;AAIA,mBAAA,GAAckF,YAAD;AAClB,aAAO7I,IAAI,CAACC,SAAL,CAAe4I,YAAY,CAAClF,IAA5B,CAAP;AACD,KAFM;AAGP;;;;;;AAIO,kBAAA,GAAY;AACjB,aAAOsF,GAAP;AACD,KAFM;AAGP;;;;;;;AAKO,iBAAA,GAAYJ,YAAD;AAChB,aAAOA,YAAY,CAAC3H,KAAb,CAAmBC,QAAnB,EAAP;AACD,KAFM;AAGP;;;;;;;AAKO,kBAAA,GAAa0H,YAAD;AACjB,aAAO8D,UAAU,CAACK,QAAX,CAAoB,UAApB,EAAgCnE,YAAY,CAACnF,SAA7C,EAAwD,KAAKoF,cAA7D,CAAP;AACD,KAFM;AAGP;;;;;;;AAKO,oBAAA,GAAeD,YAAD;AACnB,YAAMvG,KAAK,GAAQuG,YAAY,CAAC3H,KAAb,CAAmBC,QAAnB,EAAnB;AACA,aAAOkL,aAAa,CAACjB,kBAAU,CAAC9I,KAAD,CAAX,CAApB;AACD,KAHM;AAIP;;;;;;;AAKO,kBAAA,GAAauG,YAAD;AACjB,YAAMvG,KAAK,GAAQuG,YAAY,CAAC3H,KAAb,CAAmBC,QAAnB,EAAnB;AACA,aAAOoL,WAAW,CAACnB,kBAAU,CAAC9I,KAAD,CAAX,CAAlB;AACD,KAHM;AAIP;;;;;;AAIO,gBAAA,GAAU;AACf,aAAO,GAAP;AACD,KAFM;AAGP;;;;;;;AAKO,YAAA,GAAOuG,YAAD;AACX,aAAOA,YAAY,IAAIA,YAAY,CAAC1E,GAA7B,GAAmC0E,YAAY,CAAC1E,GAAb,CAAiBhD,QAAjB,EAAnC,GAAiEqI,OAAO,CAACrF,GAAR,CAAYhD,QAAZ,EAAxE;AACD,KAFM;AAGP;;;;;;;;AAMO,oBAAA,GAAc,CAAC0H,YAAD,EAAyByF,SAAzB;AACnB,UAAIzF,YAAY,CAAC3E,OAAb,IAAwBoK,SAA5B,EAAuC;AACrC,eAAOA,SAAS,CACblI,OADI,CACI,IADJ,EACUyC,YAAY,CAAC3E,OAAb,CAAqB6K,MAD/B,EAEJ3I,OAFI,CAEI,IAFJ,EAEUyC,YAAY,CAAC3E,OAAb,CAAqB8K,MAF/B,EAGJ5I,OAHI,CAGI,IAHJ,EAGUyC,YAAY,CAAC3E,OAAb,CAAqB+K,QAH/B,CAAP;AAID,OALD,MAKO,IAAIpG,YAAY,CAAC3E,OAAjB,EAA0B;AAC/B,kBAAU2E,YAAY,CAAC3E,OAAb,CAAqB8K,UAAUnG,YAAY,CAAC3E,OAAb,CAAqB6K,QAA9D;AACD;;AAED,aAAO,KAAK5K,GAAL,EAAP;AACD,KAXM;AAYP;;;;;;;;AAMO,oBAAA,GAAc,CAAC0E,YAAD,EAAyByF,SAAzB;AACnB,UAAI,OAAO,KAAKD,MAAL,CAAYC,SAAZ,CAAP,KAAkC,WAAtC,EAAmD;AACjD,eAAO,OAAO,KAAKD,MAAL,CAAYC,SAAZ,CAAP,KAAkC,UAAlC,GAA+C,KAAKD,MAAL,CAAYC,SAAZ,EAAuBzF,YAAvB,CAA/C,GAAsF,KAAKwF,MAAL,CAAYC,SAAZ,CAA7F;AACD;;AAED,aAAO,IAAP;AACD,KANM;AA9IuE;;AAsJ9E/E,EAAAA,KAAK;AACH,WAAO;AACL2F,MAAAA,CAAC,EAAE,KAAKpL,YADH;AAELqL,MAAAA,CAAC,EAAE,KAAKC,YAFH;AAGLC,MAAAA,CAAC,EAAE,KAAKP,QAHH;AAILQ,MAAAA,CAAC,EAAE,KAAKC,aAJH;AAKLC,MAAAA,CAAC,EAAE,KAAKC,UALH;AAMLC,MAAAA,CAAC,EAAE,KAAKC,SANH;AAOLC,MAAAA,CAAC,EAAE,KAAKvI,QAPH;AAQLwI,MAAAA,CAAC,EAAE,KAAKnM,SARH;AASL,WAAK,KAAKoM,WATL;AAUL,WAAK,KAAKC,SAVL;AAWLC,MAAAA,CAAC,EAAE,KAAKC,WAXH;AAYLC,MAAAA,CAAC,EAAE,KAAK/L,GAZH;AAaL,WAAK,KAAKgM,OAbL;AAcLvO,MAAAA,CAAC,EAAE,KAAKwO;AAdH,KAAP;AAgBD;;;;;AC9KH,MAAMC,KAAK,GAAG,mEAAd;AACA,MAAMC,uBAAuB,GAAG,iBAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCaC,qBAAa,mMAA1B,MAAaA,aAAb,SAAmClF,UAAnC;AAKEhM,EAAAA,YAAYO;AACV,UAAMA,MAAN;;;;;;;;;;;;;;AAyCM,qBAAA,GAAe,CAAC4Q,mBAAD,EAA8B3H,YAA9B,EAAiDyF,SAAjD;AACrB,aAAO,0DAAgBkC,mBAAhB,EAAqC3H,YAArC,EAAmDyF,SAAnD,CAAP;AACD,KAFO;;AAvCN,4DAAiB1O,MAAM,IAAIA,MAAM,CAACyK,OAAlB,IAA8BiG,uBAA9C;AACA,0DAAe1Q,MAAM,IAAIA,MAAM,CAACyO,MAAhC;AACA,gEAAkB,IAAID,cAAJ,6BAAmB,IAAnB,qBAAiC,KAAKxO,MAAL,CAAYkJ,cAA7C,EAA6DS,KAA7D,EAAlB;AACD;;AAED;;;;;;AAMAd,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,QAAI2H,eAAe,GAAG,EAAtB;AACA,QAAIC,MAAJ;;AACA,QAAIC,YAAY,+BAAG,IAAH,qBAAhB;AAEA;;;AACA,WAAO,CAACD,MAAM,GAAGL,KAAK,CAACO,IAAN,CAAWD,YAAX,CAAV,MAAwC,IAA/C,EAAqD;AACnD;AACA,YAAMnO,OAAO,GAAGkO,MAAM,CAAC,CAAD,CAAtB;AACA,YAAMlD,UAAU,GAAGkD,MAAM,CAAC,CAAD,CAAzB;AACA,YAAMF,mBAAmB,GAAGE,MAAM,CAAC,CAAD,CAAlC;AACA,YAAMpC,SAAS,GAAGoC,MAAM,CAAC,CAAD,CAAxB;AACA,YAAMG,IAAI,GAAGH,MAAM,CAAC,CAAD,CAAnB,CANmD;;AASnD,UAAIG,IAAJ,EAAU;AACRJ,QAAAA,eAAe,IAAII,IAAI,CAAC1P,QAAL,EAAnB;AACD,OAFD,MAEO;AACL;AACA;AACA,cAAMgN,WAAW,GAAG,KAAK2C,YAAL,CAAkBN,mBAAlB,EAAuC3H,YAAvC,EAAqDyF,SAArD,CAApB;AACAmC,QAAAA,eAAe,IAAIxC,cAAc,CAACE,WAAD,EAAcX,UAAd,EAA0BhL,OAA1B,CAAjC;AACD;;AACDmO,MAAAA,YAAY,GAAGA,YAAY,CAAC/C,MAAb,CAAoB8C,MAAM,CAACpO,KAAP,GAAeoO,MAAM,CAAC,CAAD,CAAN,CAAUnO,MAA7C,CAAf;AACD;;AACD,WAAOkO,eAAP;AACD;;CA7CuB;AAAbF,qBAAa,qBADzBjF,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,qDACM8Q,sBAAA;;ACtCAQ,kBAAU,GAAvB,MAAaA,UAAb,SAAgC1F,UAAhC;AACE5C,EAAAA,SAAS,CAACI,YAAD,EAAyBC,cAAzB;AACP,UAAMH,GAAG,gBACJE,YAAY,CAAC5E,OAAb,CAAqB0B,MAArB,EADI;AAEPjC,MAAAA,SAAS,EAAEmF,YAAY,CAACnF,SAFjB;AAGPI,MAAAA,YAAY,EAAE+E,YAAY,CAAC/E,YAHpB;AAIP5C,MAAAA,KAAK,EAAE2H,YAAY,CAAC3H,KAAb,CAAmBC,QAAnB;AAJA,MAAT;;AAOAwH,IAAAA,GAAG,CAAChF,IAAJ,GAAWkF,YAAY,CAAClF,IAAb,CAAkBkC,MAAlB,CAAyB,CAAClC,IAAD,EAAOqN,OAAP;AAClC,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B7O,QAAAA,MAAM,CAACiG,MAAP,CAAcO,GAAd,EAAmBqI,OAAnB;;AAEA,YAAIA,OAAO,CAACrN,IAAZ,EAAkB;AAChB,iBAAO,GAAGuJ,MAAH,CAAUvJ,IAAV,EAAgBqN,OAAO,CAACrN,IAAxB,CAAP;AACD;;AAED,eAAOA,IAAP;AACD;;AAED,aAAO,CAAC,GAAGA,IAAJ,EAAU+I,YAAY,CAACI,eAAI,CAACC,MAAL,CAAYiE,OAAZ,CAAD,CAAtB,CAAP;AACD,KAZU,EAYR,EAZQ,CAAX;AAcA,WAAOhR,IAAI,CAACC,SAAL,CAAe0I,GAAf,KAAuB,KAAK/I,MAAL,CAAY,WAAZ,KAA4B,EAAnD,CAAP;AACD;;;AAxBUmR,kBAAU,qBADtBzF,MAAM,CAAC;AAAC7L,EAAAA,IAAI,EAAE;AAAP,CAAD,IACMsR,mBAAA;;ICATE,IAAI,GAAW,IAAIlL,MAAJ,CAAW,SAAX;AAEnBkL,IAAI,CAAChL,SAAL,CACGtG,GADH,CACO,QADP,EACiB;AAACE,EAAAA,IAAI,EAAE,QAAP;AAAiB0B,EAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,OAAT;AAAzB,CADjB,EAEG5B,GAFH,CAEO,QAFP,EAEiB;AAACE,EAAAA,IAAI,EAAE,QAAP;AAAiB0B,EAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B;AAAzB,CAFjB;;;;;;;;;;;;;;;;;;;"}