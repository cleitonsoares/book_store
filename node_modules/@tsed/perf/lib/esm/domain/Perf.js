var _Perf_latest, _Perf_start;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { isPromise } from "@tsed/core";
import { fromNow, now } from "../utils/utils.js";
// istanbul ignore next
export class Perf {
    constructor() {
        _Perf_latest.set(this, void 0);
        _Perf_start.set(this, void 0);
        this.start = this.start.bind(this);
        this.end = this.end.bind(this);
        this.run = this.run.bind(this);
        this.fromStart = this.fromStart.bind(this);
        this.fromLatest = this.fromLatest.bind(this);
    }
    start() {
        __classPrivateFieldSet(this, _Perf_start, __classPrivateFieldSet(this, _Perf_latest, now(), "f"), "f");
        return this;
    }
    async runFor(it, fn) {
        const { time } = await this.run(async () => {
            for (let i = 0; i < it; i++) {
                await fn();
            }
        });
        return time;
    }
    run(fn, onTime) {
        const date = now();
        const result = fn();
        const getDiff = (result) => {
            const diff = fromNow(date);
            __classPrivateFieldSet(this, _Perf_latest, now(), "f");
            onTime && onTime(diff);
            return onTime ? result : { result, time: diff };
        };
        if (isPromise(result)) {
            return result.then(getDiff);
        }
        return getDiff(result);
    }
    fromStart() {
        return fromNow(__classPrivateFieldGet(this, _Perf_start, "f"));
    }
    fromLatest() {
        const diff = fromNow(__classPrivateFieldGet(this, _Perf_latest, "f"));
        __classPrivateFieldSet(this, _Perf_latest, now(), "f");
        return diff;
    }
    end() {
        const diff = fromNow(__classPrivateFieldGet(this, _Perf_start, "f"));
        __classPrivateFieldSet(this, _Perf_start, __classPrivateFieldSet(this, _Perf_latest, now(), "f"), "f");
        return diff;
    }
}
_Perf_latest = new WeakMap(), _Perf_start = new WeakMap();
//# sourceMappingURL=Perf.js.map