import { Configuration, InjectorService } from "@tsed/di";
import { JsonDeserializerOptions } from "@tsed/json-mapper";
import type { Cache, CachingConfig, MultiCache, TtlFunction } from "cache-manager";
import { PlatformCachedObject } from "../interfaces/PlatformCachedObject";
import { PlatformCacheSettings } from "../interfaces/interfaces";
import { Logger } from "@tsed/logger";
export declare type CacheManager = Cache | MultiCache;
/**
 * @platform
 */
export declare class PlatformCache {
    #private;
    protected settings: Configuration;
    protected injector: InjectorService;
    protected logger: Logger;
    get cache(): CacheManager | undefined;
    $onInit(): Promise<void>;
    disabled(): boolean;
    defaultKeyResolver(): (args: any[], ctx?: any) => string;
    defaultTtl(): number | TtlFunction;
    calculateTTL(result?: any, currentTtl?: number | TtlFunction): number;
    ttl(key: string): Promise<any>;
    wrap<T>(key: string, fetch: () => Promise<T>, options?: CachingConfig): Promise<T>;
    get<T>(key: string, options?: JsonDeserializerOptions): Promise<T | undefined>;
    set<T>(key: string, value: any, options?: CachingConfig): Promise<T | undefined>;
    getCachedObject(key: string): Promise<PlatformCachedObject | undefined>;
    setCachedObject(key: string, data: any, opts: {
        ttl: number;
    } & Record<string, any>): Promise<void>;
    del(key: string): Promise<void>;
    reset(): Promise<void>;
    keys(...args: any[]): Promise<string[]>;
    getMatchingKeys(patterns: string): Promise<string[]>;
    deleteMatchingKeys(patterns: string): Promise<string[]>;
    protected createCacheManager(settings: PlatformCacheSettings): Promise<MultiCache>;
}
