var _PlatformExpress_multer;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import Express from "express";
import { createContext, PlatformApplication, PlatformBuilder, PlatformExceptions, PlatformHandler, PlatformRequest, PlatformResponse } from "@tsed/common";
import { promisify } from "util";
import { Env, isFunction, nameOf } from "@tsed/core";
import { PlatformExpressHandler } from "../services/PlatformExpressHandler.js";
import { PlatformExpressResponse } from "../services/PlatformExpressResponse.js";
import { PlatformExpressRequest } from "../services/PlatformExpressRequest.js";
import { staticsMiddleware } from "../middlewares/staticsMiddleware.js";
/**
 * @platform
 * @express
 */
export class PlatformExpress {
    constructor(injector) {
        this.injector = injector;
        this.providers = [
            {
                provide: PlatformHandler,
                useClass: PlatformExpressHandler
            },
            {
                provide: PlatformResponse,
                useClass: PlatformExpressResponse
            },
            {
                provide: PlatformRequest,
                useClass: PlatformExpressRequest
            }
        ];
        _PlatformExpress_multer.set(this, void 0);
        import("multer").then(({ default: multer }) => (__classPrivateFieldSet(this, _PlatformExpress_multer, multer, "f")));
    }
    /**
     * Create new serverless application. In this mode, the component scan are disabled.
     * @param module
     * @param settings
     */
    static create(module, settings = {}) {
        return PlatformBuilder.create(module, {
            ...settings,
            adapter: PlatformExpress
        });
    }
    /**
     * Bootstrap a server application
     * @param module
     * @param settings
     */
    static async bootstrap(module, settings = {}) {
        return PlatformBuilder.bootstrap(module, {
            ...settings,
            adapter: PlatformExpress
        });
    }
    onInit() {
        this.injector.settings.middlewares = (this.injector.settings.middlewares || []).filter((middleware) => {
            const name = nameOf(middleware);
            if (["textParser", "jsonParser", "rawParser", "urlencodedParser"].includes(name)) {
                this.injector.settings.set(`express.bodyParser.${name.replace("Parser", "")}`, () => middleware);
                return false;
            }
            return true;
        });
    }
    useRouter() {
        const { logger } = this.injector;
        const app = this.injector.get(PlatformApplication);
        logger.debug("Mount app router");
        app.getApp().use(app.getRouter());
        return this;
    }
    async beforeLoadRoutes() {
        const injector = this.injector;
        const app = this.injector.get(PlatformApplication);
        // disable x-powered-by header
        injector.settings.get("env") === Env.PROD && app.getApp().disable("x-powered-by");
        await this.configureViewsEngine();
    }
    async afterLoadRoutes() {
        const injector = this.injector;
        const app = this.injector.get(PlatformApplication);
        // NOT FOUND
        app.use((req, res, next) => {
            var _a;
            !res.headersSent && ((_a = injector.get(PlatformExceptions)) === null || _a === void 0 ? void 0 : _a.resourceNotFound(req.$ctx));
        });
        // EXCEPTION FILTERS
        app.use((err, req, res, next) => {
            var _a;
            !res.headersSent && ((_a = injector.get(PlatformExceptions)) === null || _a === void 0 ? void 0 : _a.catch(err, req.$ctx));
        });
    }
    useContext() {
        const { logger } = this.injector;
        logger.debug("Mount app context");
        const invoke = createContext(this.injector);
        const app = this.injector.get(PlatformApplication);
        app.getApp().use(async (request, response, next) => {
            await invoke({ request, response });
            return next();
        });
        return this;
    }
    multipart(options) {
        const m = __classPrivateFieldGet(this, _PlatformExpress_multer, "f").call(this, options);
        const makePromise = (multer, name) => {
            // istanbul ignore next
            if (!multer[name])
                return;
            const fn = multer[name];
            multer[name] = function apply(...args) {
                const middleware = Reflect.apply(fn, this, args);
                return (req, res) => promisify(middleware)(req, res);
            };
        };
        makePromise(m, "any");
        makePromise(m, "array");
        makePromise(m, "fields");
        makePromise(m, "none");
        makePromise(m, "single");
        return m;
    }
    app() {
        const app = this.injector.settings.get("express.app") || Express();
        return {
            app,
            callback() {
                return app;
            }
        };
    }
    router(routerOptions = {}) {
        var _a;
        const options = Object.assign({
            mergeParams: true
        }, ((_a = this.injector.settings.express) === null || _a === void 0 ? void 0 : _a.router) || {}, routerOptions);
        const router = Express.Router(options);
        return {
            router,
            callback() {
                return router;
            }
        };
    }
    statics(endpoint, options) {
        const { root, ...props } = options;
        return staticsMiddleware(root, props);
    }
    bodyParser(type, additionalOptions = {}) {
        const opts = this.injector.settings.get(`express.bodyParser.${type}`);
        let parser = Express[type];
        let options = {};
        if (isFunction(opts)) {
            parser = opts;
            options = {};
        }
        switch (type) {
            case "urlencoded":
                options.extended = true;
                break;
            case "raw":
                options.type = () => true;
                break;
        }
        return parser({ ...options, ...additionalOptions });
    }
    async configureViewsEngine() {
        const injector = this.injector;
        const app = this.injector.get(PlatformApplication);
        try {
            const { exists, disabled } = this.injector.settings.get("views") || {};
            if (exists && !disabled) {
                const { PlatformViews } = await import("@tsed/platform-views");
                const platformViews = injector.get(PlatformViews);
                const express = app.getApp();
                platformViews.getEngines().forEach(({ extension, engine }) => {
                    express.engine(extension, engine.render);
                });
                platformViews.viewEngine && express.set("view engine", platformViews.viewEngine);
                platformViews.root && express.set("views", platformViews.root);
            }
        }
        catch (error) {
            // istanbul ignore next
            injector.logger.warn({
                event: "PLATFORM_VIEWS_ERROR",
                message: "Unable to configure the PlatformViews service on your environment.",
                error
            });
        }
    }
}
_PlatformExpress_multer = new WeakMap();
//# sourceMappingURL=PlatformExpress.js.map