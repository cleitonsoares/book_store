import Express, { RouterOptions } from "express";
import { InjectorService, PlatformAdapter, PlatformBuilder, PlatformContext, PlatformHandler, PlatformMulter, PlatformMulterSettings, PlatformRequest, PlatformResponse, PlatformStaticsOptions } from "@tsed/common";
import { Type } from "@tsed/core";
import { PlatformExpressHandler } from "../services/PlatformExpressHandler";
import { PlatformExpressResponse } from "../services/PlatformExpressResponse";
import { PlatformExpressRequest } from "../services/PlatformExpressRequest";
import { PlatformExpressStaticsOptions } from "../interfaces/PlatformExpressStaticsOptions";
declare module "express" {
    interface Request {
        id: string;
        $ctx: PlatformContext;
    }
}
declare global {
    namespace TsED {
        interface Router extends Express.Router {
        }
        interface Application extends Express.Application {
        }
        interface StaticsOptions extends PlatformExpressStaticsOptions {
        }
        interface Request extends Express.Request {
            id: string;
            $ctx: PlatformContext;
        }
    }
}
/**
 * @platform
 * @express
 */
export declare class PlatformExpress implements PlatformAdapter<Express.Application, Express.Router> {
    #private;
    protected injector: InjectorService;
    readonly providers: ({
        provide: typeof PlatformHandler;
        useClass: typeof PlatformExpressHandler;
    } | {
        provide: typeof PlatformResponse;
        useClass: typeof PlatformExpressResponse;
    } | {
        provide: typeof PlatformRequest;
        useClass: typeof PlatformExpressRequest;
    })[];
    constructor(injector: InjectorService);
    /**
     * Create new serverless application. In this mode, the component scan are disabled.
     * @param module
     * @param settings
     */
    static create(module: Type<any>, settings?: Partial<TsED.Configuration>): PlatformBuilder<Express.Application, Express.Router>;
    /**
     * Bootstrap a server application
     * @param module
     * @param settings
     */
    static bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformBuilder<Express.Application, Express.Router>>;
    onInit(): void;
    useRouter(): this;
    beforeLoadRoutes(): Promise<void>;
    afterLoadRoutes(): Promise<void>;
    useContext(): this;
    multipart(options: PlatformMulterSettings): PlatformMulter;
    app(): {
        app: any;
        callback(): any;
    };
    router(routerOptions?: Partial<RouterOptions>): {
        router: import("express-serve-static-core").Router;
        callback(): import("express-serve-static-core").Router;
    };
    statics(endpoint: string, options: PlatformStaticsOptions): (request: any, response: any, next: any) => void;
    bodyParser(type: "json" | "raw" | "text" | "urlencoded", additionalOptions?: any): any;
    private configureViewsEngine;
}
