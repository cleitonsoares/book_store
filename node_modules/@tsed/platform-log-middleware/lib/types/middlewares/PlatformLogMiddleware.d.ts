import { MiddlewareMethods } from "@tsed/platform-middlewares";
import { Context } from "@tsed/platform-params";
import type { LoggerRequestFields } from "../domain/PlatformLogMiddlewareSettings";
/**
 * @middleware
 * @platform
 */
export declare class PlatformLogMiddleware implements MiddlewareMethods {
    $onResponse: any;
    protected requestFields: LoggerRequestFields;
    protected logRequest: boolean;
    protected logStart: boolean;
    protected logEnd: boolean;
    protected logLevel: string;
    protected debug: boolean;
    constructor();
    get settings(): this;
    /**
     * Handle the request.
     */
    use(ctx: Context): void;
    /**
     * The separate onLogStart() function will allow developer to overwrite the initial request log.
     * @param ctx
     */
    protected onLogStart(ctx: Context): void;
    /**
     * Called when the `$onResponse` is called by Ts.ED (through Express.end).
     */
    protected onLogEnd(ctx: Context): void;
    /**
     * Attach all information that will be necessary to log the request. Attach a new `request.log` object.
     */
    protected configureRequest(ctx: Context): void;
    /**
     * Return complete request info.
     * @returns {Object}
     * @param ctx
     */
    protected requestToObject(ctx: Context): any;
    /**
     * Return a filtered request from global configuration.
     * @returns {Object}
     * @param ctx
     */
    protected minimalRequestPicker(ctx: Context): any;
}
