{"version":3,"file":"useParam.js","sourceRoot":"","sources":["../../../src/decorators/useParam.ts"],"names":[],"mappings":";;;AAAA,qCAA6D;AAC7D,yCAAiC;AAEjC,qDAAgD;AAChD,uCAAkC;AAClC,6DAAwD;AACxD,iDAA4C;AAC5C,uCAAkC;AAClC,mDAA8C;AAE9C;;;GAGG;AACH,SAAS,QAAQ,CAAC,OAA8B;IAC9C,MAAM,EAAC,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,KAAK,EAAC,GAAG,OAAO,CAAC;IAExF,OAAO;QACL,OAAO;YACL,CAAC,CAAC,IAAA,iBAAO,EAAC,OAAO,CAAC;YAClB,CAAC,CAAC,IAAA,iBAAO,EAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;gBAC7B,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,SAAS,KAAK,uBAAU,CAAC,KAAK,EAAE;oBACnF,IAAA,YAAG,GAAE,CAAC,GAAG,UAAU,CAAC,CAAC;iBACtB;YACH,CAAC,CAAC;QACN,aAAa,IAAI,IAAA,6BAAa,GAAE;QAChC,YAAY,IAAI,IAAA,uCAAkB,EAAC,KAAK,CAAC;KAC1C,CAAC;AACJ,CAAC;AAuBD,SAAgB,QAAQ,CAAC,GAAG,IAAW;IACrC,MAAM,OAAO,GAAG;QACd,GAAG,CAAC,CAAC,IAAA,eAAQ,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAClD,SAAS,EAAE,IAAA,eAAQ,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;KAC3D,CAAC;IAEF,OAAO,IAAA,oBAAa,EAAC,IAAA,2BAAY,EAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAuB,CAAC;AAC1F,CAAC;AAPD,4BAOC","sourcesContent":["import {isBuffer, isString, useDecorators} from \"@tsed/core\";\nimport {Any} from \"@tsed/schema\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {ParamFn} from \"./paramFn\";\nimport {UseDeserialization} from \"./useDeserialization\";\nimport {UseParamType} from \"./useParamType\";\nimport {UseType} from \"./useType\";\nimport {UseValidation} from \"./useValidation\";\n\n/**\n * @ignore\n * @param options\n */\nfunction mapPipes(options: Partial<ParamOptions>) {\n  const {paramType, useType, expression, useValidation, useConverter, ...props} = options;\n\n  return [\n    useType\n      ? UseType(useType)\n      : ParamFn((entity, parameters) => {\n          if (entity.isCollection && entity.type === Object && paramType !== ParamTypes.FILES) {\n            Any()(...parameters);\n          }\n        }),\n    useValidation && UseValidation(),\n    useConverter && UseDeserialization(props)\n  ];\n}\n\n/**\n * Register a new param. It use the paramType to extract value and give it to the next pipe.\n *\n * Given options allow to enable or disable following pipes:\n *\n * - useType: Add extra type for the json mapper,\n * - expression: Get property from the returned value by the previous pipe.\n * - useValidation: Apply validation from the returned value by the previous pipe.\n * - useConverter: Apply json mapper from the returned value by the previous pipe.\n *\n * @param options\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseParam(options: Partial<ParamOptions>): ParameterDecorator;\n/**\n * @deprecated Since v6\n */\nexport function UseParam(paramType: string, options?: Partial<ParamOptions>): ParameterDecorator;\nexport function UseParam(...args: any[]): ParameterDecorator {\n  const options = {\n    ...((isString(args[0]) ? args[1] : args[0]) || {}),\n    paramType: isString(args[0]) ? args[0] : args[0].paramType\n  };\n\n  return useDecorators(UseParamType(options), ...mapPipes(options)) as ParameterDecorator;\n}\n"]}