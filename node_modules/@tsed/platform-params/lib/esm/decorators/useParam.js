import { isString, useDecorators } from "@tsed/core";
import { Any } from "@tsed/schema";
import { ParamTypes } from "../domain/ParamTypes.js";
import { ParamFn } from "./paramFn.js";
import { UseDeserialization } from "./useDeserialization.js";
import { UseParamType } from "./useParamType.js";
import { UseType } from "./useType.js";
import { UseValidation } from "./useValidation.js";
/**
 * @ignore
 * @param options
 */
function mapPipes(options) {
    const { paramType, useType, expression, useValidation, useConverter, ...props } = options;
    return [
        useType
            ? UseType(useType)
            : ParamFn((entity, parameters) => {
                if (entity.isCollection && entity.type === Object && paramType !== ParamTypes.FILES) {
                    Any()(...parameters);
                }
            }),
        useValidation && UseValidation(),
        useConverter && UseDeserialization(props)
    ];
}
export function UseParam(...args) {
    const options = {
        ...((isString(args[0]) ? args[1] : args[0]) || {}),
        paramType: isString(args[0]) ? args[0] : args[0].paramType
    };
    return useDecorators(UseParamType(options), ...mapPipes(options));
}
//# sourceMappingURL=useParam.js.map