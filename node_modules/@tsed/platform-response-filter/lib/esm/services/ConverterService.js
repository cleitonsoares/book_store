import { __decorate, __metadata, __param } from "tslib";
import { Configuration, Injectable, InjectorService } from "@tsed/di";
import { deserialize, serialize } from "@tsed/json-mapper";
/**
 * @deprecated Since 2021-10-03. Use serialize/deserialize functions from @tsed/json-mapper instead
 */
let ConverterService = class ConverterService {
    constructor(injectorService, configuration) {
        this.injectorService = injectorService;
        this._additionalProperties = configuration.get("converter.additionalProperties");
    }
    /**
     * Convert instance to plainObject.
     *
     * @param obj
     * @param options
     */
    serialize(obj, options = {}) {
        return serialize(obj, {
            useAlias: true,
            additionalProperties: this._additionalProperties === "accept",
            ...options
        });
    }
    /**
     * Convert a plainObject to targetType.
     *
     * ### Options
     *
     * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.
     * - `checkRequiredValue`: Disable the required check condition.
     *
     * @param obj Object source that will be deserialized
     * @param options Mapping options
     * @returns {any}
     */
    deserialize(obj, options = {}) {
        return deserialize(obj, {
            useAlias: true,
            additionalProperties: this._additionalProperties === "accept",
            ...options
        });
    }
};
ConverterService = __decorate([
    Injectable(),
    __param(1, Configuration()),
    __metadata("design:paramtypes", [InjectorService, Object])
], ConverterService);
export { ConverterService };
//# sourceMappingURL=ConverterService.js.map