"use strict";
var _PlatformViews_extensions, _PlatformViews_engines, _PlatformViews_cachePaths;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformViews = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = require("path");
const PlatformViewsSettings_1 = require("../domain/PlatformViewsSettings");
async function patchEJS(ejs) {
    if (!ejs) {
        const mod = await Promise.resolve().then(() => tslib_1.__importStar(require("ejs")));
        ejs = mod.default;
    }
    return {
        compile(str, { client, ...options }) {
            return ejs.compile(str, options);
        }
    };
}
async function tryImport(name) {
    try {
        return await Promise.resolve().then(() => tslib_1.__importStar(require(name)));
    }
    catch (er) {
        // istanbul ignore next
    }
}
/**
 * @platform
 */
let PlatformViews = class PlatformViews {
    constructor() {
        _PlatformViews_extensions.set(this, void 0);
        _PlatformViews_engines.set(this, new Map());
        _PlatformViews_cachePaths.set(this, new Map());
    }
    async $onInit() {
        if (!this.disabled) {
            tslib_1.__classPrivateFieldSet(this, _PlatformViews_extensions, new Map(Object.entries({
                ...PlatformViewsSettings_1.PLATFORM_VIEWS_EXTENSIONS,
                ...this.extensionsOptions
            })), "f");
            await this.loadFromConsolidate();
            await this.loadFromTsedEngines();
        }
    }
    /**
     * @deprecated
     */
    async loadFromConsolidate() {
        const cons = await tryImport("consolidate");
        if (cons) {
            cons.requires.ejs = await patchEJS(cons.requires.ejs);
            tslib_1.__classPrivateFieldGet(this, _PlatformViews_extensions, "f").forEach((engineType) => {
                if (cons[engineType]) {
                    const options = this.getEngineOptions(engineType);
                    if (options.requires) {
                        cons.requires[engineType] = options.requires;
                    }
                    this.registerEngine(engineType, {
                        options,
                        render: cons[engineType]
                    });
                }
            });
        }
    }
    async loadFromTsedEngines() {
        const tsed = await tryImport("@tsed/engines");
        if (tsed) {
            tsed.requires.set("ejs", await patchEJS(tsed.requires.get("ejs")));
            tslib_1.__classPrivateFieldGet(this, _PlatformViews_extensions, "f").forEach((engineType) => {
                if (tsed.engines.has(engineType)) {
                    const options = this.getEngineOptions(engineType);
                    if (options.requires) {
                        tsed.requires.set(engineType, options.requires);
                    }
                    this.registerEngine(engineType, {
                        options,
                        render: tsed.getEngine(engineType)
                    });
                }
            });
        }
    }
    getEngines() {
        return [...tslib_1.__classPrivateFieldGet(this, _PlatformViews_extensions, "f").entries()].map(([extension, engineType]) => {
            const engine = this.getEngine(this.getExtension(engineType));
            return {
                extension,
                engine
            };
        });
    }
    registerEngine(engineType, engine) {
        tslib_1.__classPrivateFieldGet(this, _PlatformViews_engines, "f").set(engineType, engine);
        return this;
    }
    getEngine(type) {
        return tslib_1.__classPrivateFieldGet(this, _PlatformViews_engines, "f").get(tslib_1.__classPrivateFieldGet(this, _PlatformViews_extensions, "f").get(type) || type);
    }
    getEngineOptions(engineType) {
        return (0, core_1.getValue)(this.engineOptions, engineType, {});
    }
    async render(viewPath, options = {}) {
        const { path, extension } = tslib_1.__classPrivateFieldGet(this, _PlatformViews_cachePaths, "f").get(viewPath) || tslib_1.__classPrivateFieldGet(this, _PlatformViews_cachePaths, "f").set(viewPath, this.resolve(viewPath)).get(viewPath);
        const engine = this.getEngine(extension);
        if (!engine) {
            throw new Error(`Engine not found to render the following "${viewPath}"`);
        }
        return engine.render(path, Object.assign({ cache: this.cache || this.env === core_1.Env.PROD }, engine.options, options));
    }
    getExtension(viewPath) {
        return ((0, path_1.extname)(viewPath) || this.viewEngine).replace(/\./, "");
    }
    resolve(viewPath) {
        const extension = this.getExtension(viewPath);
        viewPath = viewPath.replace((0, path_1.extname)(viewPath), "") + "." + extension;
        const path = [
            viewPath,
            (0, path_1.resolve)((0, path_1.join)(this.root, viewPath)),
            (0, path_1.resolve)((0, path_1.join)(process.cwd(), "views", viewPath)),
            (0, path_1.resolve)((0, path_1.join)(process.cwd(), "public", viewPath))
        ].find((file) => fs_1.default.existsSync(file)) || viewPath;
        return {
            path,
            extension
        };
    }
};
_PlatformViews_extensions = new WeakMap(), _PlatformViews_engines = new WeakMap(), _PlatformViews_cachePaths = new WeakMap();
tslib_1.__decorate([
    (0, di_1.Constant)("env"),
    tslib_1.__metadata("design:type", String)
], PlatformViews.prototype, "env", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.root", `${process.cwd()}/views`),
    tslib_1.__metadata("design:type", String)
], PlatformViews.prototype, "root", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.cache"),
    tslib_1.__metadata("design:type", Boolean)
], PlatformViews.prototype, "cache", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.disabled", false),
    tslib_1.__metadata("design:type", String)
], PlatformViews.prototype, "disabled", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.viewEngine", "ejs"),
    tslib_1.__metadata("design:type", String)
], PlatformViews.prototype, "viewEngine", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.extensions", {}),
    tslib_1.__metadata("design:type", Object)
], PlatformViews.prototype, "extensionsOptions", void 0);
tslib_1.__decorate([
    (0, di_1.Constant)("views.options", {}),
    tslib_1.__metadata("design:type", Object)
], PlatformViews.prototype, "engineOptions", void 0);
PlatformViews = tslib_1.__decorate([
    (0, di_1.Module)({
        views: {
            exists: true
        }
    })
], PlatformViews);
exports.PlatformViews = PlatformViews;
//# sourceMappingURL=PlatformViews.js.map