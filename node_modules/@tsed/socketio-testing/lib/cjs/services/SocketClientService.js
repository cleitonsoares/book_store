"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketClientService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const di_1 = require("@tsed/di");
const socket_io_client_1 = require("socket.io-client");
let SocketClientService = class SocketClientService {
    constructor() {
        this.clients = new Map();
    }
    async get(namespace = "/", path) {
        if (this.clients.has(namespace)) {
            return this.clients.get(namespace);
        }
        const { address, port } = this.settings.getHttpPort();
        const uri = `http://${address}:${port}${namespace}`;
        this.logger.info("Bind Socket.io client on:", uri);
        const client = (0, socket_io_client_1.io)(uri, path ? { path } : undefined);
        this.clients.set(namespace, client);
        await new Promise((resolve) => {
            client.on("connect", resolve);
        });
        this.logger.debug("Socket.io client connected...");
        return client;
    }
    $onDestroy() {
        this.clients.forEach((client) => client.close());
        this.logger.debug("Socket.io clients closed...");
    }
};
tslib_1.__decorate([
    (0, di_1.Configuration)(),
    tslib_1.__metadata("design:type", Object)
], SocketClientService.prototype, "settings", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(),
    tslib_1.__metadata("design:type", common_1.Logger)
], SocketClientService.prototype, "logger", void 0);
SocketClientService = tslib_1.__decorate([
    (0, di_1.Injectable)()
], SocketClientService);
exports.SocketClientService = SocketClientService;
//# sourceMappingURL=SocketClientService.js.map