import { __decorate, __metadata } from "tslib";
import { Inject, Logger } from "@tsed/common";
import { Configuration, Injectable } from "@tsed/di";
import { io } from "socket.io-client";
let SocketClientService = class SocketClientService {
    constructor() {
        this.clients = new Map();
    }
    async get(namespace = "/", path) {
        if (this.clients.has(namespace)) {
            return this.clients.get(namespace);
        }
        const { address, port } = this.settings.getHttpPort();
        const uri = `http://${address}:${port}${namespace}`;
        this.logger.info("Bind Socket.io client on:", uri);
        const client = io(uri, path ? { path } : undefined);
        this.clients.set(namespace, client);
        await new Promise((resolve) => {
            client.on("connect", resolve);
        });
        this.logger.debug("Socket.io client connected...");
        return client;
    }
    $onDestroy() {
        this.clients.forEach((client) => client.close());
        this.logger.debug("Socket.io clients closed...");
    }
};
__decorate([
    Configuration(),
    __metadata("design:type", Object)
], SocketClientService.prototype, "settings", void 0);
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], SocketClientService.prototype, "logger", void 0);
SocketClientService = __decorate([
    Injectable()
], SocketClientService);
export { SocketClientService };
//# sourceMappingURL=SocketClientService.js.map