{"version":3,"file":"SocketClientService.js","sourceRoot":"","sources":["../../../src/services/SocketClientService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,MAAM,EAAY,MAAM,cAAc,CAAC;AACvD,OAAO,EAAC,aAAa,EAAE,UAAU,EAAC,MAAM,UAAU,CAAC;AACnD,OAAO,EAAC,EAAE,EAAS,MAAM,kBAAkB,CAAC;AAG5C,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAAhC;QAOU,YAAO,GAAwB,IAAI,GAAG,EAAE,CAAC;IA4BnD,CAAC;IA1BC,KAAK,CAAC,GAAG,CAAC,YAAoB,GAAG,EAAE,IAAa;QAC9C,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC;SACrC;QAED,MAAM,EAAC,OAAO,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACpD,MAAM,GAAG,GAAG,UAAU,OAAO,IAAI,IAAI,GAAG,SAAS,EAAE,CAAC;QAEpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAElD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEpC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC5B,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,OAAc,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAEnD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACnD,CAAC;CACF,CAAA;AAjCC;IADC,aAAa,EAAE;;qDACgB;AAGhC;IADC,MAAM,EAAE;8BACO,MAAM;mDAAC;AALZ,mBAAmB;IAD/B,UAAU,EAAE;GACA,mBAAmB,CAmC/B;SAnCY,mBAAmB","sourcesContent":["import {Inject, Logger, OnDestroy} from \"@tsed/common\";\nimport {Configuration, Injectable} from \"@tsed/di\";\nimport {io, Socket} from \"socket.io-client\";\n\n@Injectable()\nexport class SocketClientService implements OnDestroy {\n  @Configuration()\n  private settings: Configuration;\n\n  @Inject()\n  private logger: Logger;\n\n  private clients: Map<string, Socket> = new Map();\n\n  async get(namespace: string = \"/\", path?: string): Promise<Socket> {\n    if (this.clients.has(namespace)) {\n      return this.clients.get(namespace)!;\n    }\n\n    const {address, port} = this.settings.getHttpPort();\n    const uri = `http://${address}:${port}${namespace}`;\n\n    this.logger.info(\"Bind Socket.io client on:\", uri);\n    const client = io(uri, path ? {path} : undefined);\n\n    this.clients.set(namespace, client);\n\n    await new Promise((resolve) => {\n      client.on(\"connect\", resolve as any);\n    });\n\n    this.logger.debug(\"Socket.io client connected...\");\n\n    return client;\n  }\n\n  $onDestroy() {\n    this.clients.forEach((client) => client.close());\n    this.logger.debug(\"Socket.io clients closed...\");\n  }\n}\n"]}