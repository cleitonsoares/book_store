import { ancestorsOf, isClass } from "@tsed/core";
import { Configuration, InjectorService, registerProvider } from "@tsed/di";
import { AbstractRepository, getCustomRepository, Repository, useContainer } from "typeorm";
import { TypeORMService } from "./services/TypeORMService.js";
const WHITELIST = [Repository, AbstractRepository];
export class TypeORMModule {
    constructor(configuration, typeORMService) {
        this.typeORMService = typeORMService;
        this.settings = configuration.get("typeorm", []);
    }
    async init() {
        const promises = this.settings.map((opts) => this.typeORMService.createConnection(opts));
        return Promise.all(promises);
    }
    $onDestroy() {
        return this.typeORMService.closeConnections();
    }
}
function isRepository(type) {
    const ancestors = ancestorsOf(type);
    return (isClass(type) &&
        ancestors.find((ancestor) => {
            return WHITELIST.includes(ancestor);
        }));
}
registerProvider({
    provide: TypeORMModule,
    deps: [Configuration, TypeORMService, InjectorService],
    resolvers: [
        {
            deps: [TypeORMModule],
            get(type, options) {
                if (isRepository(type)) {
                    try {
                        return getCustomRepository(type, options.connection || "default");
                    }
                    catch (er) {
                        if (process.env.NODE_ENV !== "test") {
                            throw er;
                        }
                    }
                }
            }
        }
    ],
    injectable: false,
    async useAsyncFactory(configuration, typeORMService, injector) {
        useContainer({
            get(type) {
                return injector.hasProvider(type) ? injector.get(type) : undefined;
            }
        }, { fallback: true });
        const typeORMModule = new TypeORMModule(configuration, typeORMService);
        await typeORMModule.init();
        return typeORMModule;
    }
});
//# sourceMappingURL=TypeORMModule.js.map