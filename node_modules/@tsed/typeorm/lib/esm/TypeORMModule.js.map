{"version":3,"file":"TypeORMModule.js","sourceRoot":"","sources":["../../src/TypeORMModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAE,OAAO,EAAO,MAAM,YAAY,CAAC;AACtD,OAAO,EAAC,aAAa,EAAE,eAAe,EAAa,gBAAgB,EAAC,MAAM,UAAU,CAAC;AACrF,OAAO,EAAC,kBAAkB,EAAoC,mBAAmB,EAAE,UAAU,EAAE,YAAY,EAAC,MAAM,SAAS,CAAC;AAC5H,OAAO,EAAC,cAAc,EAAC,MAAM,2BAA2B,CAAC;AAEzD,MAAM,SAAS,GAAG,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;AAEnD,MAAM,OAAO,aAAa;IAGxB,YAAY,aAA4B,EAAU,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAC9E,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAsB,SAAS,EAAE,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;QAEzF,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;IAChD,CAAC;CACF;AAED,SAAS,YAAY,CAAC,IAAe;IACnC,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAEpC,OAAO,CACL,OAAO,CAAC,IAAI,CAAC;QACb,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1B,OAAO,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAED,gBAAgB,CAAC;IACf,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,eAAe,CAAC;IACtD,SAAS,EAAE;QACT;YACE,IAAI,EAAE,CAAC,aAAa,CAAC;YACrB,GAAG,CAAC,IAAI,EAAE,OAAY;gBACpB,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;oBACtB,IAAI;wBACF,OAAO,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,IAAI,SAAS,CAAC,CAAC;qBACnE;oBAAC,OAAO,EAAE,EAAE;wBACX,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;4BACnC,MAAM,EAAE,CAAC;yBACV;qBACF;iBACF;YACH,CAAC;SACF;KACF;IACD,UAAU,EAAE,KAAK;IACjB,KAAK,CAAC,eAAe,CAAC,aAA4B,EAAE,cAA8B,EAAE,QAAyB;QAC3G,YAAY,CACV;YACE,GAAG,CAAI,IAAsB;gBAC3B,OAAO,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAI,IAAW,CAAE,CAAC,CAAC,CAAC,SAAU,CAAC;YACjF,CAAC;SACF,EACD,EAAC,QAAQ,EAAE,IAAI,EAAC,CACjB,CAAC;QAEF,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QACvE,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAE3B,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC,CAAC","sourcesContent":["import {ancestorsOf, isClass, Type} from \"@tsed/core\";\nimport {Configuration, InjectorService, OnDestroy, registerProvider} from \"@tsed/di\";\nimport {AbstractRepository, ConnectionOptions, ContainedType, getCustomRepository, Repository, useContainer} from \"typeorm\";\nimport {TypeORMService} from \"./services/TypeORMService\";\n\nconst WHITELIST = [Repository, AbstractRepository];\n\nexport class TypeORMModule implements OnDestroy {\n  private settings: ConnectionOptions[];\n\n  constructor(configuration: Configuration, private typeORMService: TypeORMService) {\n    this.settings = configuration.get<ConnectionOptions[]>(\"typeorm\", []);\n  }\n\n  async init(): Promise<any> {\n    const promises = this.settings.map((opts) => this.typeORMService.createConnection(opts));\n\n    return Promise.all(promises);\n  }\n\n  $onDestroy(): Promise<any> | void {\n    return this.typeORMService.closeConnections();\n  }\n}\n\nfunction isRepository(type: Type<any>) {\n  const ancestors = ancestorsOf(type);\n\n  return (\n    isClass(type) &&\n    ancestors.find((ancestor) => {\n      return WHITELIST.includes(ancestor);\n    })\n  );\n}\n\nregisterProvider({\n  provide: TypeORMModule,\n  deps: [Configuration, TypeORMService, InjectorService],\n  resolvers: [\n    {\n      deps: [TypeORMModule],\n      get(type, options: any) {\n        if (isRepository(type)) {\n          try {\n            return getCustomRepository(type, options.connection || \"default\");\n          } catch (er) {\n            if (process.env.NODE_ENV !== \"test\") {\n              throw er;\n            }\n          }\n        }\n      }\n    }\n  ],\n  injectable: false,\n  async useAsyncFactory(configuration: Configuration, typeORMService: TypeORMService, injector: InjectorService) {\n    useContainer(\n      {\n        get<T>(type: ContainedType<T>): T {\n          return injector.hasProvider(type) ? injector.get<T>(type as any)! : undefined!;\n        }\n      },\n      {fallback: true}\n    );\n\n    const typeORMModule = new TypeORMModule(configuration, typeORMService);\n    await typeORMModule.init();\n\n    return typeORMModule;\n  }\n});\n"]}