import { __decorate, __metadata } from "tslib";
import { Inject, InjectorService, Service } from "@tsed/di";
import { getValue } from "@tsed/core";
import { getConnectionManager } from "typeorm";
import { createConnection } from "../utils/createConnection.js";
let TypeORMService = class TypeORMService {
    constructor() {
        /**
         *
         * @type {"typeorm".ConnectionManager}
         * @private
         */
        this.connectionManager = getConnectionManager();
    }
    /**
     *
     * @returns {Promise<"typeorm".Connection>}
     */
    async createConnection(connectionOptions) {
        const name = getValue(connectionOptions, "name", "default");
        try {
            const connection = await createConnection({ ...connectionOptions, name });
            this.injector.logger.info(`Connected with typeorm to database: ${connection.name}`);
            return connection;
        }
        catch (err) {
            /* istanbul ignore next */
            console.error(err);
            /* istanbul ignore next */
            process.exit();
        }
    }
    /**
     *
     * @returns {"typeorm".Connection}
     */
    get(id = "default") {
        return this.connectionManager.get(id);
    }
    /**
     *
     * @param {string} id
     * @returns {boolean}
     */
    has(id = "default") {
        return this.connectionManager.has(id);
    }
    closeConnections() {
        const promises = this.connectionManager.connections.map((instance) => {
            if (instance.isConnected) {
                return instance.close();
            }
        });
        return Promise.all(promises);
    }
};
__decorate([
    Inject(InjectorService),
    __metadata("design:type", InjectorService)
], TypeORMService.prototype, "injector", void 0);
TypeORMService = __decorate([
    Service()
], TypeORMService);
export { TypeORMService };
//# sourceMappingURL=TypeORMService.js.map