{"version":3,"file":"TypeORMService.js","sourceRoot":"","sources":["../../../src/services/TypeORMService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,eAAe,EAAE,OAAO,EAAC,MAAM,UAAU,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AACpC,OAAO,EAAmD,oBAAoB,EAAC,MAAM,SAAS,CAAC;AAC/F,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAG3D,IAAa,cAAc,GAA3B,MAAa,cAAc;IAA3B;QACE;;;;WAIG;QACM,sBAAiB,GAAsB,oBAAoB,EAAE,CAAC;IAmDzE,CAAC;IA9CC;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CAAC,iBAAoC;QACzD,MAAM,IAAI,GAAG,QAAQ,CAAS,iBAAiB,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QAEpE,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YACxE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAEpF,OAAO,UAAU,CAAC;SACnB;QAAC,OAAO,GAAG,EAAE;YACZ,0BAA0B;YAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,0BAA0B;YAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;SAChB;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,KAAa,SAAS;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAa,SAAS;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,gBAAgB;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnE,IAAI,QAAQ,CAAC,WAAW,EAAE;gBACxB,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AAhDC;IADC,MAAM,CAAC,eAAe,CAAC;8BACN,eAAe;gDAAC;AATvB,cAAc;IAD1B,OAAO,EAAE;GACG,cAAc,CAyD1B;SAzDY,cAAc","sourcesContent":["import {Inject, InjectorService, Service} from \"@tsed/di\";\nimport {getValue} from \"@tsed/core\";\nimport {Connection, ConnectionManager, ConnectionOptions, getConnectionManager} from \"typeorm\";\nimport {createConnection} from \"../utils/createConnection\";\n\n@Service()\nexport class TypeORMService {\n  /**\n   *\n   * @type {\"typeorm\".ConnectionManager}\n   * @private\n   */\n  readonly connectionManager: ConnectionManager = getConnectionManager();\n\n  @Inject(InjectorService)\n  private injector: InjectorService;\n\n  /**\n   *\n   * @returns {Promise<\"typeorm\".Connection>}\n   */\n  async createConnection(connectionOptions: ConnectionOptions): Promise<any> {\n    const name = getValue<string>(connectionOptions, \"name\", \"default\");\n\n    try {\n      const connection = await createConnection({...connectionOptions, name});\n      this.injector.logger.info(`Connected with typeorm to database: ${connection.name}`);\n\n      return connection;\n    } catch (err) {\n      /* istanbul ignore next */\n      console.error(err);\n      /* istanbul ignore next */\n      process.exit();\n    }\n  }\n\n  /**\n   *\n   * @returns {\"typeorm\".Connection}\n   */\n  get(id: string = \"default\"): Connection {\n    return this.connectionManager.get(id);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  has(id: string = \"default\"): boolean {\n    return this.connectionManager.has(id);\n  }\n\n  closeConnections(): Promise<any> {\n    const promises = this.connectionManager.connections.map((instance) => {\n      if (instance.isConnected) {\n        return instance.close();\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n"]}